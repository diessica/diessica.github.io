<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Diéssica Gurskas</title>
  
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://diessi.ca/"/>
  <updated>2018-02-05T23:40:12.000Z</updated>
  <id>https://diessi.ca/</id>
  
  <author>
    <name>Diéssica Gurskas</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Creativity</title>
    <link href="https://diessi.ca/blog/creativity/"/>
    <id>https://diessi.ca/blog/creativity/</id>
    <published>2018-02-05T23:25:00.000Z</published>
    <updated>2018-02-05T23:40:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>In a life where, by default, there’s no meaning at all, I value creating above all. If I’m creating, that’s a meaningful day.</p>
<p>Lately, I’ve been pondering on the phenomenon of creativity and why creative people are so inspiring to be around. They just broad my perception of the universe profoundly. What really happens?</p>
<h2 id="the-phenomenon">The Phenomenon <a class="title-anchor" href="#the-phenomenon" aria-hidden="true">¶</a></h2>
<p>In an interview in the late 1990s<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, Steve Jobs said something that years later would be seen as one of the most simple but accurate definitions of creativity:</p>
<blockquote>
<p>“Creativity is just connecting things.”</p>
</blockquote>
<p>And he followed with something I couldn’t help but relate: <em>“When you ask creative people how they did something, they feel a little guilty because they didn’t really do it, they just saw something. It seemed obvious to them after a while. […]”</em>.</p>
<p>In the wake of being called creative, I was used to responding with the most unfair answer ever: &quot;But everything I did was mixing stuff from here and there!?!“. It turns out, however, that “mixing stuff” actually describes precisely the process creative people go through.</p>
<p>And when Steve Jobs said that, he was mixing stuff as well! He most likely got inspired by James Webb Young’s conception of idea, presented in his book <a href="https://www.goodreads.com/book/show/534755.A_Technique_for_Producing_Ideas">A Technique for Producing Ideas</a>, from the 1940s.</p>
<blockquote>
<p>An idea is nothing more nor less than a new combination of old elements [and] the capacity to bring old elements into new combinations depends largely on the ability to see relationships.</p>
</blockquote>
<p class="note">For James to suggest that, well, guess what? He was inspired by <a href="https://en.wikipedia.org/wiki/Vilfredo_Pareto">Pareto</a>'s idea of the "speculator", a personality type characterized by a constant preoccupation with the possibilities of new combinations of old elements. (Which sort of proves his own point on "ideas as a combination of old elements".)</p>
<p>Creatives are just so overloaded with elements to mix that those overflow and flow out of their heads, and they can’t help but inspire everyone around.</p>
<p>They reframe experiences and mix their elements to be synthesised into something valuable and unique. From songs, painting, programming to scientific theories – all of them comes from <strong>mixtures</strong>. When the mixture feels good, either as a homogeneous or heterogeneous result, it’s then a <em>creation</em>.</p>
<h2 id="the-creation-the-weird">The Creation, The Weird <a class="title-anchor" href="#the-creation-the-weird" aria-hidden="true">¶</a></h2>
<figure style="text-align: center;"><picture><img class="normal-img" src="../../media/2018/creativity.png" width="500" alt="Creativity comics"></picture>
<figcaption><a href="http://dorrismccomics.com/post/64681231561">Creativity</a>, by Alex Norris.</figcaption></figure>
<p>When the creation is a product way far from its source elements (which are things that people most likely are already aware of), it’s perceived with weirdness. That’s when we truly innovate. To come up with the weird, though, we have to limit ourselves to certain existing elements – an outstanding habit people like Alan Turing had.</p>
<p class="note">Alan Turing was an inspiring computer scientist. Among other cool stuff, he proposed humans to consider the question <a href="http://phil415.pbworks.com/f/TuringComputing.pdf">"Can computers think?"</a>, and also designed <a href="https://en.m.wikipedia.org/wiki/Bombe">cryptanalytical machines</a>, crucial to cracking German encoded communication during the World War II. Cool stuff!</p>
<p>As described by James Wilkinson, who worked closely with him, Turing avoided looking at previous work on a topic just so he could invent something truly original, truly <strong>weird</strong>.</p>
<p><em>”Turing had a strong predilection for working things out from first principles, usually in the first instance without consulting any previous work on the subject, and no doubt it was this habit which gave his work that characteristically original flavor.&quot;</em> <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<p>Finally, the ones who release their creations end up turning into painters, mathematicians, writers, architects, sculptors, programmers, musicians. It’s a process that happens in absolutely every realm of thinking and work.</p>
<p>And you know what?</p>
<h2 id="its-been-shown-by-nature">…It’s Been Shown by Nature <a class="title-anchor" href="#its-been-shown-by-nature" aria-hidden="true">¶</a></h2>
<p>When Young and Steve Jobs pointed out that the creative process wasn’t magic, they, again, didn’t do anything “new” either. That definition has been shown by Nature for a long time, and, as early as 450 B.C, the philosopher <a href="https://en.wikipedia.org/wiki/Anaxagoras">Anaxagoras</a> described it:</p>
<blockquote>
<p>“Wrongly do the Greeks suppose that something<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> begins or ceases to be; for nothing comes into being or is destroyed; but all is an aggregation or secretion of pre-existing things; so that all becoming might more correctly be called becoming mixed, and all corruption, becoming separate.”</p>
</blockquote>
<p class="note">That might remember you of the Law of Conservation of Mass, later defined by the chemist Antoine Lavoisier.</p>
<p>Just like in the creative process, Nature has always found a way out of its problems by coming up with solutions from pre-existing elements. Even the Planet Earth has transformed from a violent, molten rock to a supporter of life by using what the Universe had already provided!</p>
<p>Its process of creation was the same as the human’s creative process for the discovery of fire, the invention of the wheel, shitty <em>and</em> useful startup ideas, the Pink Floyd’s Echoes song, and all quotes in this post: mixing, connecting, combining “stuff”. From the Planet Earth to what you’re reading right now, the laws that ruled their creations were, in essence, the same.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Steve Jobs. <a href="https://www.wired.com/1996/02/jobs-2/">“Steve Jobs: The Next Insanely Great Thing”</a>. WIRED. January 1996. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>James H. Wilkinson, <a href="http://www.jdl.ac.cn/turing/pdf/p137-wilkinson.pdf">“Some Comments from a Numerical Analyst”</a>, 1970. <a href="https://en.wikipedia.org/wiki/Turing_Award">Turing Award</a> lecture, <em>Journal of the ACM</em>. February 1971. <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>I’ve deliberately changed “aught”, an archaic English word, to “something” for the sake of readability. <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In a life where, by default, there’s no meaning at all, I value creating above all. If I’m creating, that’s a meaningful day.&lt;/p&gt;
&lt;p&gt;Late
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>Dental Health and Habits</title>
    <link href="https://diessi.ca/blog/dental-health-and-habits/"/>
    <id>https://diessi.ca/blog/dental-health-and-habits/</id>
    <published>2017-12-21T10:58:09.000Z</published>
    <updated>2017-12-21T15:16:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Brushing teeth is a good habit. An easy-to-build one, I’d say, thanks to the immediate reward given by the refreshing sensation. After brushing, you <em>feel</em>  clean right away.</p>
<p>On the other hand, flossing teeth isn’t a habit as easy to build.  After flossing, what comes to mind is how dirty your teeth still were even though you just brushed, not how cleaner they became. There’s no such thing as a fresh sensation in your mouth.</p>
<p>When you finish brushing your teeth, they’re still dirty – no doubt. However, it’s still gratifying, since you’re fooled by the menthol ability to trigger the cooling sensation. <em>(Hence the human inclination to brushing rather than flossing!?)</em></p>
<p>In terms of dental health, though, flossing teeth is more effective on cleaning than brushing<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, <strong>even if it doesn’t feel like it.</strong> There’s no immediate reward in flossing, but definitely a long-term one.</p>
<p>What am I trying to say? Apart from dental health advice, that sort of reminds me that we shouldn’t rely on feeling instantaneously compensated as a fuel to build habits. After all, some things just need the long-term to pay off; for we to benefit from them.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>I’ve read that at some point in my life but don’t remember where. You can find some resources out there, such as “<a href="https://askthedentist.com/flossing-or-brushing-more-important/">What’s More Important: Flossing or Brushing?</a>”. Anyway, I think we’re safe assuming that flossing is, at least,  <em>as important</em> as brushing. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Brushing teeth is a good habit. An easy-to-build one, I’d say, thanks to the immediate reward given by the refreshing sensation. After br
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>Expressive JavaScript Conditionals (for Humans)</title>
    <link href="https://diessi.ca/blog/expressive-javascript-conditionals/"/>
    <id>https://diessi.ca/blog/expressive-javascript-conditionals/</id>
    <published>2017-10-30T02:00:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Conditionals! As programmers, we write at least one every day. Easy to write, horrible to read, and sometimes it seems as though there’s no way to work around that.</p>
<p>Today, I’m happy to share some patterns I’ve learned over time and have spread heavily in code reviews. Let’s rethink conditionals to make the most out of a language’s power of expression – in the case of this article, JavaScript.</p>
<h2 id="patterns-for-conditionals">Patterns for Conditionals <a class="title-anchor" href="#patterns-for-conditionals" aria-hidden="true">¶</a></h2>
<p>First, to put you in the mood, a quote from Literate Programming<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, by Donald Knuth.</p>
<p style="text-align: center; font-style: italic">The practitioner of literate programming can be regarded as an essayist, whose main concern is with exposition and excellence of style. Such an author, with thesaurus in hand, chooses the names of variables carefully and explains what each variable means. He or she strives for a program that is comprehensible because its concepts have been introduced in an order that is best for human understanding, using a mixture of formal and informal methods that reinforce each other.</p>
<p>That sums up the approach for this post: purely aimed at <strong>how to write code for people to read</strong>. Performance doesn’t matter now, since 1) that’s not the goal and 2) I don’t believe in premature optimisation.</p>
<p>I’ll briefly talk about each pattern, but what’s more important here is to read the code carefully and get something out of it (as if it were poetry or something!).</p>
<h3 id="1-variables-that-hold-conditions">1. Variables that hold conditions <a class="title-anchor" href="#1-variables-that-hold-conditions" aria-hidden="true">¶</a></h3>
<p>When your condition is made up of an expression (or many of them), you can store it within meaningful-named variables.</p>
<p>Let’s say, to illustrate, that our program holds some data about a fruit and we have to check whether that fruit is a banana. We could do this:</p>
<pre><code class="language-js"><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span>
    colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    sweet<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>
    fruit<span class="token punctuation">.</span>sweet <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span>
    fruit<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>color <span class="token operator">=</span><span class="token operator">></span> color <span class="token operator">===</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'do your stuff 🍌'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">'is banana'</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Or we could store our conditions in variables!</p>
<pre><code class="language-js"><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span>
    colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    sweet<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> isSweet <span class="token operator">=</span> fruit<span class="token punctuation">.</span>sweet <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// or just `fruit.sweet`</span>
<span class="token keyword">const</span> isYellow <span class="token operator">=</span> fruit<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>color <span class="token operator">=</span><span class="token operator">></span> color <span class="token operator">===</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> isBanana <span class="token operator">=</span> isYellow <span class="token operator">&amp;&amp;</span> isSweet

<span class="token keyword">if</span> <span class="token punctuation">(</span>isBanana<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'do your stuff 🍌'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">'is banana'</span>
<span class="token punctuation">}</span>
</code></pre>
<p class="note">Not all conditions need to be in a variable. <code>fruit.sweet</code>, for instance, is quite expressive by its own.</p>
<p>This way, if we or our workmates need to know what makes a fruit a banana in our program, it’s just a matter of checking out the variable itself. The logic for how conditions evaluate will be there, behind a meaningful name.</p>
<p>It’s even more useful for composing and reusing conditions.</p>
<h4 id="filtering-arrays">Filtering arrays <a class="title-anchor" href="#filtering-arrays" aria-hidden="true">¶</a></h4>
<p class="note">In the previous example, all variables were conditions based on the <code>fruit</code> object, for didactic purposes. Commonly, though, those variables actually store (pure) functions that take any fruit and test against it. I'm changing that to fit this example.</p>
<p>Let’s say we’ve got an array of fruits and we need to filter all the bananas out of it.</p>
<pre><code class="language-js"><span class="token keyword">const</span> fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    sweet<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    sweet<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// don't know what kind of fruit this'd be</span>
 <span class="token punctuation">}</span><span class="token punctuation">]</span>

<span class="token keyword">const</span> isSweet <span class="token operator">=</span> fruit <span class="token operator">=</span><span class="token operator">></span> fruit<span class="token punctuation">.</span>sweet <span class="token operator">===</span> <span class="token boolean">true</span>

<span class="token keyword">const</span> isYellow <span class="token operator">=</span> fruit <span class="token operator">=</span><span class="token operator">></span>
    fruit<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>color <span class="token operator">=</span><span class="token operator">></span> color <span class="token operator">===</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> isBanana <span class="token operator">=</span> fruit <span class="token operator">=</span><span class="token operator">></span> <span class="token function">isSweet</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isYellow</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>

<span class="token keyword">const</span> bananas <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isBanana<span class="token punctuation">)</span>
</code></pre>
<p>So expressive! I love the way that I can read that last line and even a kid (a non-programmer one!) can understand. <em>(Yes, I’ve tried that.)</em></p>
<p>The currying technique would help introduce expressiveness without the verbosity for <code>isBanana</code>. An optional appendix at the end of the article elaborates more on that, if you’re curious.</p>
<p>That’s it. Hold on to that one though – it’s the foundation for what’s next.</p>
<h3 id="2-define-value-conditionally">2. Define value conditionally <a class="title-anchor" href="#2-define-value-conditionally" aria-hidden="true">¶</a></h3>
<p>Still considering the variables from the example above, this could also be done:</p>
<pre><code class="language-js"><span class="token keyword">const</span> myFruit <span class="token operator">=</span> isYellow <span class="token operator">&amp;&amp;</span> isSweet <span class="token operator">&amp;&amp;</span> <span class="token string">'banana'</span>
<span class="token keyword">return</span> myFruit
</code></pre>
<p>The value for the <code>myFruit</code> variable will only be assigned to “banana” if those conditions are true. Pretty useful for when values are defined conditionally!</p>
<p>That saves you from <code>if (isYellow &amp;&amp; isSweet) [...]</code>, and it’s quite expressive, I’d say. An expressive expression. 👌</p>
<h3 id="3-define-value-conditionally-with-fallback">3. Define value conditionally with fallback <a class="title-anchor" href="#3-define-value-conditionally-with-fallback" aria-hidden="true">¶</a></h3>
<figure style="text-align: center"><picture><img class="normal-img" width="250" src="https://imgs.xkcd.com/comics/conditionals_2x.png" alt="Conditionals, a comic from xkcd"></picture>
<figcaption><a href="http://xkcd.com/1652">xkcd: Conditionals</a></figcaption></figure>
<p>What if we want something else in case it’s not a banana? Instead of an <code>if (isBanana) [...]</code> with <code>else</code>, go for the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">ternary operator</a>.</p>
<pre><code class="language-js"><span class="token keyword">const</span> isBanana <span class="token operator">=</span> isYellow <span class="token operator">&amp;&amp;</span> isSweet
<span class="token keyword">const</span> myFruit <span class="token operator">=</span> isBanana <span class="token operator">?</span> <span class="token string">'is banana'</span> <span class="token punctuation">:</span> <span class="token string">'is other stuff'</span>
<span class="token keyword">return</span> myFruit
</code></pre>
<p>Some additional but important advice I’d give regarding ternary expressions:</p>
<ul>
<li>Make them as compound as possible.</li>
<li>Do NOT nest them. Don’t pretend the nesting is readable – it’s not even human to do that.</li>
<li>Don’t avoid writing <code>if</code> statements because you want to look smart.</li>
</ul>
<h3 id="4-check-for-all-conditions">4. Check for all conditions <a class="title-anchor" href="#4-check-for-all-conditions" aria-hidden="true">¶</a></h3>
<p>We’ve (finally) found out that checking for <code>isYellow</code> and <code>isSweet</code> isn’t enough to make sure the fruit is a banana. After all, yellow pepper is both sweet and yellow and it’s still not a banana, right?</p>
<p>Right. We then add more checks to the <code>isBanana</code> variable, and this time they’re ugly ones: they check whether the fruit is either from Brazil or Ecuador, both top banana producing countries.</p>
<pre><code class="language-js"><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span>
    colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    sweet<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    countries<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token string">'Brazil'</span><span class="token punctuation">,</span>
        topProducer<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// i'm brazilian and therefore biased</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token string">'Ecuador'</span><span class="token punctuation">,</span>
        topProducer<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> isSweet <span class="token operator">=</span> fruit<span class="token punctuation">.</span>sweet <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// or just `fruit.sweet`</span>
<span class="token keyword">const</span> isYellow <span class="token operator">=</span> fruit<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>color <span class="token operator">=</span><span class="token operator">></span> color <span class="token operator">===</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> isBrazilian <span class="token operator">=</span> fruit<span class="token punctuation">.</span>countries<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Brazil'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> isEcuadorian <span class="token operator">=</span> fruit<span class="token punctuation">.</span>countries<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Ecuador'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> isBanana <span class="token operator">=</span> isYellow <span class="token operator">&amp;&amp;</span> isSweet <span class="token operator">&amp;&amp;</span> isBrazilian <span class="token operator">&amp;&amp;</span> isEcuadorian

<span class="token keyword">if</span> <span class="token punctuation">(</span>isBanana<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'do your stuff!11 🍌'</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'now this is really a banana'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Did you see how big <code>isBanana</code> is getting? We’d have to start breaking lines in those <code>&amp;&amp;</code> to improve readability, which, personally, I don’t like doing.</p>
<p>If refactoring the booleans into new variables isn’t an option anymore, what about <em>storing the conditions in an array and testing every item for truthiness</em>?</p>
<p>Use the power of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every">array’s <code>every</code></a>:</p>
<pre><code class="language-js"><span class="token keyword">const</span> isBanana <span class="token operator">=</span> <span class="token punctuation">[</span>isYellow<span class="token punctuation">,</span> isSweet<span class="token punctuation">,</span> isEcuadorian<span class="token punctuation">,</span> isBrazilian<span class="token punctuation">]</span>
    <span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// or `x => x === true`</span>
</code></pre>
<p class="note">Repetitive friendly reminder: don't store every condition in a variable. Remember you can always add the condition itself to the array.</p>
<p>You can even turn that into a snippet:</p>
<pre><code class="language-js"><span class="token keyword">const</span> all <span class="token operator">=</span> arr <span class="token operator">=</span><span class="token operator">></span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>

<span class="token keyword">const</span> isBanana <span class="token operator">=</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    isYellow<span class="token punctuation">,</span>
    isSweet<span class="token punctuation">,</span>
    isEcuadorian<span class="token punctuation">,</span>
    isBrazilian<span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>I don’t know how useful that looks for you, but, in everyday work, I really appreciate doing it.</p>
<h3 id="5-check-for-any-condition">5. Check for any condition <a class="title-anchor" href="#5-check-for-any-condition" aria-hidden="true">¶</a></h3>
<p>What if we’ve got crazy and we’re fine considering something a banana when it’s either yellow, Brazilian or sweet?</p>
<p>Use the power of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some">array’s <code>some</code></a>:</p>
<pre><code class="language-js"><span class="token keyword">const</span> isBanana <span class="token operator">=</span> <span class="token punctuation">[</span>isYellow<span class="token punctuation">,</span> isSweet<span class="token punctuation">,</span> isBrazilian<span class="token punctuation">]</span>
    <span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// or `x => x === true`</span>
</code></pre>
<p class="note">Yeah, yeah, I know, you can just use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR_()">OR operator</a>.</p>
<p>If any of them evaluates to true, profit! – it’s a banana. 🍌</p>
<pre><code class="language-js"><span class="token keyword">const</span> any <span class="token operator">=</span> arr <span class="token operator">=</span><span class="token operator">></span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>

<span class="token keyword">const</span> isBanana <span class="token operator">=</span> <span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    isYellow<span class="token punctuation">,</span>
    isSweet<span class="token punctuation">,</span>
    isBrazilian<span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>In other words, being a Brazilian means you’re a banana! It doesn’t sound any bad to me honestly.</p>
<p>Pretty similar to <a href="http://ramdajs.com/docs/#either">Ramda’s <code>either</code></a>. 😎</p>
<h3 id="6-early-return">6. Early return <a class="title-anchor" href="#6-early-return" aria-hidden="true">¶</a></h3>
<p>We want something special for when the banana is Brazilian! <code>else</code> conditions would do the trick, wouldn’t they?</p>
<pre><code class="language-js"><span class="token keyword">const</span> fruit <span class="token operator">=</span> <span class="token punctuation">{</span>
    colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'yellow'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    sweet<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    countries<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token string">'Brazil'</span><span class="token punctuation">,</span>
        topProducer<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// i'm brazilian and therefore biased</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token string">'Ecuador'</span><span class="token punctuation">,</span>
        topProducer<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> isSweet <span class="token operator">=</span> fruit<span class="token punctuation">.</span>sweet <span class="token operator">===</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// or just `fruit.sweet`</span>
<span class="token keyword">const</span> isYellow <span class="token operator">=</span> fruit<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>color <span class="token operator">=</span><span class="token operator">></span> color <span class="token operator">===</span> <span class="token string">'yellow'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> isBrazilian <span class="token operator">=</span> fruit<span class="token punctuation">.</span>countries<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Brazil'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> isEcuadorian <span class="token operator">=</span> fruit<span class="token punctuation">.</span>countries<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'Ecuador'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> isBanana <span class="token operator">=</span> isYellow <span class="token operator">&amp;&amp;</span> isSweet

<span class="token keyword">if</span> <span class="token punctuation">(</span>isBanana <span class="token operator">&amp;&amp;</span> isBrazilian<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// first true case!</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'i am a brazilian banana i love football 🍌'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isBanana <span class="token operator">&amp;&amp;</span> isEcuadorian<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'i am an ecuadorian banana do not mess with me 🍌'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'a normal banana from somewhere else'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Alternatively, THOOOUGH, we can early return (nothing at all, i.e. <code>undefined</code>), which will make <strong>our code stops its flow at that point</strong>.</p>
<pre><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>isBanana <span class="token operator">&amp;&amp;</span> isBrazilian<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'i am a brazilian banana i love football 🍌'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// sTAAAAHP!!!1</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>isBanana <span class="token operator">&amp;&amp;</span> isEcuadorian<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'i am an ecuadorian banana do not mess with me 🍌'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// DON'T GO ANY FURTHER, JAVASCRIPT!11</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// or do, whatever</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'a normal banana from somewhere else'</span><span class="token punctuation">)</span>
</code></pre>
<p class="note">Those checks could also be refactored into a variable named <code>isBrazilianBanana</code>. I found it too much for this example though, so this is just a friendly reminder that your conditions can always be composable.</p>
<p>Keep in mind that early returns might make the flow of your program confusing. Different from when you’re using <code>else</code> conditions, it’s not explicit that the conditionals are from the same logical group anymore.</p>
<h3 id="7-check-for-the-same-variable">7. Check for the same variable <a class="title-anchor" href="#7-check-for-the-same-variable" aria-hidden="true">¶</a></h3>
<p>Let’s get the colour of the fruits! Each fruit has one.</p>
<p>Hmmm… Different cases that require different handling, but all handled cases depend on the same thing. What do we do? We conditionally check for its value and handle the case depending on that.</p>
<pre><code class="language-js"><span class="token keyword">const</span> getFruitColor <span class="token operator">=</span> fruit <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit <span class="token operator">===</span> <span class="token string">'banana'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">'is yellow'</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit <span class="token operator">===</span> <span class="token string">'apple'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">'is red'</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fruit <span class="token operator">===</span> <span class="token string">'orange'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">'is orange'</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">getFruitColor</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => is yellow</span>
</code></pre>
<p class="note">This code would benefit from early returns, and, of course, the <code>switch</code> statement.</p>
<p>Or we don’t. Because, alternatively, we can create a getter function (<code>getFruitColor</code>) that:</p>
<ol>
<li>inputs a key (<code>fruit</code>), and</li>
<li>outputs the value that was assigned to that key in a specific map (<code>fruitColors</code>).</li>
</ol>
<p>Like this:</p>
<pre><code class="language-js"><span class="token keyword">const</span> fruitColors <span class="token operator">=</span> <span class="token punctuation">{</span>
    banana<span class="token punctuation">:</span> <span class="token string">'is yellow'</span>
    apple<span class="token punctuation">:</span> <span class="token string">'is red'</span><span class="token punctuation">,</span>
    orange<span class="token punctuation">:</span> <span class="token string">'is orange'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> getFruitColor <span class="token operator">=</span> fruit <span class="token operator">=</span><span class="token operator">></span> fruitColors<span class="token punctuation">[</span>fruit<span class="token punctuation">]</span>

<span class="token function">getFruitColor</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// fruitColors['banana'] => is yellow</span>
</code></pre>
<p>Simplifying, since that map isn’t useful outside of the getter itself anyway:</p>
<pre><code class="language-js"><span class="token keyword">const</span> getFruitColor <span class="token operator">=</span> fruit <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    banana<span class="token punctuation">:</span> <span class="token string">'is yellow'</span>
    apple<span class="token punctuation">:</span> <span class="token string">'is red'</span><span class="token punctuation">,</span>
    orange<span class="token punctuation">:</span> <span class="token string">'is orange'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">[</span>fruit<span class="token punctuation">]</span>

<span class="token function">getFruitColor</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => is yellow</span>
</code></pre>
<p>This is a very common technique I first saw on a <a href="https://javascriptweblog.wordpress.com/2010/03/08/caseagainstswitch/">blog post from Angus Croll</a> in 2010. I love the simplicity of it.</p>
<p>Nowadays there’s even more freedom with this technique, considering features such as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names">computed property names for objects</a>. But don’t get too creative with that! Go for what’s more readable and expressive for you <strong>AND</strong> the people you work with.</p>
<h3 id="appendix-currying-because-verbosity-isnt-expressiveness">Appendix: Currying, because verbosity isn’t expressiveness <a class="title-anchor" href="#appendix-currying-because-verbosity-isnt-expressiveness" aria-hidden="true">¶</a></h3>
<p class="note">This is an additional reading and requires familiarity with curried functions. For further reading on the currying technique, I recommend the <a href="https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch4.html#cant-live-if-livin-is-without-you">"Currying" chapter</a> of the book Mostly Adequate Guide to Functional Programming, or <a href="https://www.sitepoint.com/currying-in-functional-javascript/">A Beginner’s Guide to Currying</a>, as a more beginner-friendly introduction.</p>
<p>Let’s reconsider:</p>
<ol>
<li>the problem from the 1st, where we had an array of fruits and had to create a function that checks whether the fruit passed to it was a banana, and</li>
<li>the <code>all</code> util from the 4th pattern.</li>
</ol>
<h4 id="check-for-all-conditions-revisited">Check for all conditions, revisited <a class="title-anchor" href="#check-for-all-conditions-revisited" aria-hidden="true">¶</a></h4>
<p>Imagine if we had a lot of conditions for <code>isBanana</code>. We could use <code>&amp;&amp;</code> or even <code>all</code>.</p>
<pre><code class="language-js"><span class="token keyword">const</span> isBanana <span class="token operator">=</span> fruit <span class="token operator">=</span><span class="token operator">></span> <span class="token function">isBanana</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSweet</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isEcuadorian</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBrazilian</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// or</span>
<span class="token keyword">const</span> isBanana <span class="token operator">=</span> fruit <span class="token operator">=</span><span class="token operator">></span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token function">isYellow</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">isSweet</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">isEcuadorian</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">isBrazilian</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p>It’s meaningful, easy to read, but introduces too much verbosity. The currying technique could help us introduce more meaning without being verbose. With some changes in the <code>all</code> util, that could be boiled down to:</p>
<pre><code class="language-js"><span class="token keyword">const</span> isBanana <span class="token operator">=</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>isSweet<span class="token punctuation">,</span> isYellow<span class="token punctuation">,</span> isEcuadorian<span class="token punctuation">,</span> isBrazilian<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// no explicit fruit here, and still works!</span>
<span class="token keyword">const</span> bananas <span class="token operator">=</span> fruits<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isBanana<span class="token punctuation">)</span>
</code></pre>
<p>Notice we’re not explicitly passing fruit anymore. How do we do that? By making <code>all</code> a curried function. There are some ways to achieve that, here’s one:</p>
<pre><code class="language-js"><span class="token keyword">const</span> all <span class="token operator">=</span> conditions <span class="token operator">=</span><span class="token operator">></span>
    currentItem <span class="token operator">=</span><span class="token operator">></span> conditions
        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>condition <span class="token operator">=</span><span class="token operator">></span> <span class="token function">condition</span><span class="token punctuation">(</span>currentItem<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>
</code></pre>
<p>It takes the array of conditions and returns a function that takes the current item and calls each condition with that (as <em>argument</em>!). At the end, we check whether they all evaluated to true. It’s not magic, it’s CURRYING!!!11<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<p>That’s, of course, a simplistic implementation, which has costed me an array (from <code>map</code>). What’s important to get is how we play with <strong>function arguments under the hood</strong> to achieve currying.</p>
<p>You can curry your functions using <a href="http://ramdajs.com/docs/#all">Ramda’s <code>curry</code></a> (or Lodash’s, whatever); or, if you’re interested on that as an util, <a href="http://ramdajs.com/docs/#all">Ramda’s <code>all</code></a> and <a href="https://github.com/ramda/ramda/blob/master/source/all.js">its source</a> are really worth-checking!</p>
<h2 id="final-considerations">Final considerations <a class="title-anchor" href="#final-considerations" aria-hidden="true">¶</a></h2>
<p>By striving for conditionals as expressions other than statements, you write code in a <strong>functional</strong> approach. Code with a clearer sense of what it’s being checked without having to unearth to its foundations. Code that’s easier and faster for people to reason about.</p>
<blockquote>
<p>But if your code is fine with an <code>if</code> rather than an object lookup or a ternary operator, just stick to it.</p>
</blockquote>
<p>It’d break the whole purpose of this post if those patterns were used for looking smart. However, if refactoring your conditionals with them would lead to a more expressive codebase, go for it! Play with the patterns, <strong>compound them</strong>. Use your creativity to communicate well.</p>
<p>It’s a language, after all.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>A programming paradigm first introduced by Donald Knuth, with the goal of providing an alternative, human, perspective on the programmer’s motivation. <a href="http://www.literateprogramming.com/knuthweb.pdf">Read the article</a>. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><strong>It may seem more magic than currying sometimes.</strong> JavaScript isn’t a purely functional language, so such techniques aren’t as popular as they are in Haskell community, for instance. Simplicity conflicts with easiness here. <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Conditionals! As programmers, we write at least one every day. Easy to write, horrible to read, and sometimes it seems as though there’s 
    
    </summary>
    
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>UI Components that Abstract Mistakes</title>
    <link href="https://diessi.ca/blog/ui-components-that-abstract-mistakes/"/>
    <id>https://diessi.ca/blog/ui-components-that-abstract-mistakes/</id>
    <published>2017-10-14T21:06:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017, October 14th.</p>
<p>A cloudy day <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> of Autumn in Berlin, probably something else in the place you live, <em>and</em> you’ve read the same date twice <em>and</em> this introduction actually doesn’t matter. But let me tell you about something that matters.</p>
<p>Everything is made up of <code>&lt;div&gt;</code>s and <code>&lt;span&gt;</code>s again, utterly hidden behind abstractions proudly called components.  No one seems to remember <em>(or do they?)</em> the difference between <code>p</code> and <code>span</code>, let alone the point of using <code>section</code> rather than <code>div</code>.</p>
<p>Bad decisions – to not just to say bad and even invalid HTML markup – are buried in components developers find awesome to compose user interfaces with. The web, and people, pay the price.</p>
<hr>
<h2 id="creating-components">Creating components <a class="title-anchor" href="#creating-components" aria-hidden="true">¶</a></h2>
<p class="note">From now on, to explain my point, I'll be assuming some familiarity with <a href="https://reactjs.org/" title="React">React</a> (a JavaScript library), although this applies to any kind of component abstraction.</p>
<p>Let’s say you just started a brand new React web app. You need to create a button at some point, and, because it’s reused in other parts of the app, has custom styles and also a fancy icon, you decide to introduce a component with all that abstracted out. Nice! You could do it like this:</p>
<pre><code class="language-js"><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> onClick<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"my-horrible-button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"my-terrible-font-awesome-icon"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>
    <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
</code></pre>
<p>The user interface is then composed as the following:</p>
<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Brazilian Bananas <span class="token punctuation">(</span><span class="token number">1</span> kg<span class="token punctuation">)</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Sweet and healthy bananas<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Absolutely the best<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'🍌'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Buy $<span class="token number">0.99</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
</code></pre>
<p>It looks good! You were born for this, weren’t you?</p>
<p>Quite easy to miss what’s wrong when components are just used like that. A button, isn’t it? The engineering team can easily grasp what that means and what that does, after all.</p>
<p>It could also be a <code>&lt;FormLabel /&gt;</code> or <code>&lt;Paragraph /&gt;</code> as <code>span</code> elements, or <code>div</code>s all over that place. Although they all work, mistakes are abstracted in components.</p>
<p class="note">I specifically talk about markup as the mistake throughout this article, however it could be anything really. Components look inoffensive when you're using them.</p>
<h2 id="the-web-isnt-your-abstraction">The web isn’t your abstraction <a class="title-anchor" href="#the-web-isnt-your-abstraction" aria-hidden="true">¶</a></h2>
<p>Now that HTML is all abstracted through JavaScript libraries and frameworks (which is not wrong), I wonder whether developers only went for semantic elements for the sake of making markup more readable for themselves. With React, your <code>&lt;Header&gt;</code> now may be a <code>div</code>. Out of the abstraction, though, you’d think twice before going for a <code>div</code> to make a header – you’d rather use HTML5’s <code>header</code>.</p>
<blockquote>
<p>Because of the abstraction, output markup isn’t something we talk that much about anymore.</p>
</blockquote>
<p>Did we really get the benefits of HTML5 and why new elements were introduced?  Why <code>button</code>? <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> What’s <code>header</code> useful for? Why should one use <code>section</code> at all?</p>
<p class="note">By the way, do you know how many occurrences of <code>header</code>,  <code>article</code>,  <code>section</code> I've found on Netflix's landing page? Zero.  It's all div soup.</p>
<p>Matter of fact is that browser engines and people – nothing less than the ones who you really write code for – won’t ever know about your abstractions. A screen reader won’t know your “button” is actually a button<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>. (They will definitely get to know the <code>span</code> though, and that won’t help.)</p>
<figure style="text-align: center"><picture><img class="normal-img" src="https://imgs.xkcd.com/comics/tags.png" alt="xkcd, comic #1444"></picture>
<figcaption><a href="http://xkcd.com/1144">xkcd: Tags</a></figcaption></figure>
<p>Also, it’s never been easier to write invalid markup without even realizing it! After React, it seems acceptable to place a <code>button</code> inside an anchor link, and even giant elephants inside <code>span</code>. Has anyone ever thought why they are considered invalid markup in the first place?</p>
<h2 id="dont-make-it-hard">Don’t make it hard <a class="title-anchor" href="#dont-make-it-hard" aria-hidden="true">¶</a></h2>
<p>Browsers and assistive technologies are smarter than ever<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>, indeed, yet they still count on developers to write code they can understand and people can benefit from. By doing so, you make it easy for:</p>
<ol>
<li><strong>people</strong>, who will be able to navigate around the website, skipping over navigation sections or quickly jumping from one article to another<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>.</li>
<li><strong>yourself</strong>, so you don’t have to reimplement default browser behaviours.</li>
</ol>
<p>Therefore, please: don’t waste features that technologies try to give users, and developers, out of the box.</p>
<p>Remember who you write code for.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>If I had managed to publish this yesterday, the day would be sunny. I’ve missed the opportunity to make the article seems a little happier. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>The button element was first introduced in HTML4. (<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button">Source</a>) <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>What’s wrong with using a non-semantic element as a button? Well, if the button is accessible, nothing really. But doing so demands <a href="https://www.marcozehe.de/2013/04/24/easy-aria-tip-6-making-clickables-accessible/">extra work</a> that nobody is up for, besides that fact that <a href="https://www.nczonline.net/blog/2013/01/29/you-cant-create-a-button/">you can’t actually create a button</a>. <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p>Technologies may even process <code>&lt;span class=&quot;tel&quot;&gt;123-456-7890&lt;/span&gt;</code> as a telephone, and allow for automatic dialling of it. See <a href="https://en.wikipedia.org/wiki/Microformat">microformat</a> for more information. <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn5" class="footnote-item"><p>Why not, right? After all, <code>article</code>s are for independent pieces of content, e.g., an user-submitted comment or a forum post. (<a href="https://www.w3.org/TR/html5/sections.html#the-article-element">Source</a>) <a href="#fnref5" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017, October 14th.&lt;/p&gt;
&lt;p&gt;A cloudy day &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; of Autumn in Berlin, probably 
    
    </summary>
    
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
      <category term="html" scheme="https://diessi.ca/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>An Open Letter to my Loving Father</title>
    <link href="https://diessi.ca/blog/an-open-letter-to-my-loving-father/"/>
    <id>https://diessi.ca/blog/an-open-letter-to-my-loving-father/</id>
    <published>2017-08-13T14:18:09.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Dad,</p>
<p>I remember the first English sentence you taught me when I was a kid. The memory is quite strong to me.</p>
<p>It was about love. We were in our first house in Viamão – my favourite! –, in our living room with walls painted in lime green (a trendy color at that time), and you spoke it to me, pointing that it was in English:</p>
<blockquote>
<p>“I love my life because my life is you.”</p>
</blockquote>
<p>In order to memorise, I repeated it a couple of times and wrote it in a white balloon I was playing with. At that moment, we were both unaware of the importance of what had happened: you were encouraging me, still pretty young, to assimilate the basic structure of an English sentence and a few important words of this language I’d end up using very often for the rest of my life.</p>
<p>Unpretentious moment, but that sums up our far-from-perfect-but-ours relationship. You, always showing me the path despite the limited sources (things you’ve learned for yourself, mostly); me, always pushing myself to get the most out of your guidance.</p>
<p>My childhood memories are full of you. The first English speaker, IT-electronics-electrical technician, designer, painter, (Quake 3 Arena) gamer, programmer, movies fan, music-addicted, critic, and road biker I’ve met.</p>
<p>Having grown up by the side of a curious person with such a creative mind, able to make everything out of the absolute nothing and humbly teach anyone anything, is a privilege, and I’d like to thank you for that. I’m proud of the fact that, over time, we could even grow together and get to know better versions of ourselves.</p>
<p>In the end, I believe my favourite traits and achievements are all related to you somehow. My ability to push myself forward no matter what, my first computer, my first job, my first road bike, my hyperbolic passion for my stuff, and even my moving to Berlin. You’ve played a role in all of them.</p>
<p><em>(By the way, the reason I cried in your arms minutes before flying to Berlin is something I honestly bet no one is able to understand. I’d say it came from an eventual awareness of the why I was there and why things were leading to that way. It was all you. My bridge to computers. My bridge to the world.)</em></p>
<p>I feel like a little piece of you, wondering whether I’ll ever make you as proud as I should before you leave me.</p>
<p>Will you ever leave me, though? On second thought, I reckon you never will.</p>
<figure style="text-align: center;"><picture><img class="normal-img" src="../../media/2017/dad-2005.jpg" alt="Me and my dad"></picture>
<figcaption>My dad, João, and I, on his computer chair in 2005.</figcaption></figure>
<p>Happy Father’s Day!</p>
<p>Proud of you, who did completely different from your father,</p>
<p>Your daughter,<br />Diéssica</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dad,&lt;/p&gt;
&lt;p&gt;I remember the first English sentence you taught me when I was a kid. The memory is quite strong to me.&lt;/p&gt;
&lt;p&gt;It was about l
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>Tchau</title>
    <link href="https://diessi.ca/blog/tchau/"/>
    <id>https://diessi.ca/blog/tchau/</id>
    <published>2017-05-13T19:12:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="summary">
<p>de Viamão, Brasil para Berlim, Alemanha.</p>
<p>🇩🇪</p>
</div>
<blockquote class="epigraph -default-color">
<p>– <em>Tu tem que ver o que é pra ti, sabe? Se tu ficar aí, tu provavelmente vai ficar nessa mesma por bastante tempo. É isso que tu quer?</em></p>
<p>– <em>Não, meu sonho sempre foi morar fora, do país.</em></p>
<p>– <strong>O meu também é. Esse é o meu foco, pra sempre. Eu nunca tirei isso da mente.</strong></p>
</blockquote>
<p>A memória parece distante agora, mas não faz muito tempo que eu tive essa conversa. 30 de Março de 2016. Já faz um pouco mais de um ano. Falávamos de indecisões, insatisfações e mudanças, quando sonhos vieram à tona.</p>
<p><strong>Sonhos.</strong> Pessoalmente, penso neles como desejos fixos que habitam a nossa consciência junto a  outros desejos, mais efêmeros, e que, assim que você os deixa de lado (nem que seja um pouco), inconvenientemente voltam a te atormentar; lembrar que eles ainda estão lá e não são como os outros desejos.</p>
<hr>
<blockquote>
<p>“Esse é o meu foco, pra sempre. Eu nunca tirei isso da mente.”</p>
</blockquote>
<p>Palavras minhas. Confesso, me assustam. Ou melhor, me assustavam. O que me assusta mais agora é o fato de eu ter lido isto em menos de um ano depois:</p>
<div class="note">
<p><em>[…] I’m personally very happy to say that after everything we’ve heard and seen, we think you’re a great match for us and would love for you to join our team here in Berlin.</em></p>
<p>([…] Pessoalmente, estou muito feliz de dizer que, depois de tudo que nós ouvimos e vimos, achamos que você tem tudo a ver com a gente e gostaríamos que se juntasse ao nosso time aqui em Berlim!)</p>
</div>
<p>O que seria para sempre o meu foco, o desejo que eu descorri por 30 linhas no meu LG R510 em uma carta de maio de 2012, aquilo que eu nunca havia tirado da mente, naquele momento surgia como uma oportunidade. Eu topei.</p>
<p>Foram vários passos antes disso, e eu lembro de estar ansiosa antes de cada um deles. Encontrei pessoas maravilhosas durante o caminho, com um coração tão grande como o meu. Tanto na vida quanto nessa entrevista em particular.</p>
<p>Nas entrevistas, o processo simplesmente fluiu. Penso e gosto de pensar que é o que acontece quando os aspectos técnicos são vistos como meros meios necessários para aquilo que realmente importa: criar.</p>
<p>Desde aquele momento até hoje, o dia do meu voo, o tempo pareceu nunca passar em alguns momentos, e, em outros, passar rápido demais. Mesmo com a percepção confusa do tempo, tenho certeza de que poder enviar a mensagem abaixo é algo que eu não imaginava para tão cedo.</p>
<div class="note">
<p><em>Just got the call! […] That’s an important moment of my life for sure. I’m just, you know, happy. Thank you for this.</em></p>
</div>
<p><em>The call</em>. A ligação se referia a do Consulado Geral da Alemanha de Porto Alegre que recebi no dia 8 de maio, dizendo o que esperei 2 semanas (ou toda a minha vida?) para ouvir. <strong>O meu visto estava aprovado.</strong> Ali estava, sem dúvidas, um momento importante da minha vida.</p>
<p>Do resto do telefonema, confesso, não lembro muito. Minha maior memória desses instantes foi a de andar com o coração cheio até o centro de Porto Alegre como se fosse a última vez. E foi, pelo menos por um bom tempo.</p>
<hr>
<p>Um sonho pode, afinal, terminar de 2 maneiras: sendo abandonado ou realizado.</p>
<p>Meu caso é o segundo, e, sinceramente, não está fácil acreditar. Se você me disser que a partir de hoje eu já não moro mais onde cresci, que meu voo hoje é só de ida, essa informação será processada de forma que ela não faça sentido na minha realidade. Eu não vou acreditar.</p>
<p>Por outro lado, nesse momento da minha vida em que a gratidão transcende o mérito, acredito em várias outras coisas. A principal é que sou o resultado do fenômeno que acontece quando a oportunidade encontra o anseio: alguém, no passado, acreditou em mim; alguém, no presente, acredita em mim. E eu não as deixei decepcionar.</p>
<hr>
<p>Hoje estou voando para Berlim, a capital da Alemanha, para fazer o que amo na <a href="http://hellofresh.com">HelloFresh</a>, que me ajudou em todo o processo. Sou grata por isso, por tudo.</p>
<p>Quanto à realidade, não é que eu não tenha medo. Eu tenho. Eu tive medo em todas as vezes que ousei. Desde o primeiro emprego que fui atrás no Brasil (no tédio do meu Ensino Médio), dos projetos além do meu conhecimento, até o meu primeiro emprego fora do Brasil… eu tive medo em todos eles.</p>
<p>Eu só jamais deixaria o sonho terminar do outro jeito, então eu topei tudo mesmo assim.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;summary&quot;&gt;
&lt;p&gt;de Viamão, Brasil para Berlim, Alemanha.&lt;/p&gt;
&lt;p&gt;🇩🇪&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote class=&quot;epigraph -default-color&quot;&gt;
&lt;p&gt;– &lt;
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
  </entry>
  
  <entry>
    <title>Choose Life  🇩🇪</title>
    <link href="https://diessi.ca/blog/choose-life-in-berlin/"/>
    <id>https://diessi.ca/blog/choose-life-in-berlin/</id>
    <published>2017-05-12T22:15:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Choose life. Choose a job. Choose a career. Choose relocation. Choose giving life a <em>fresh</em><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> beginning. Choose an one-way flight ticket. Choose fitting your entire life in a 23 kg suitcase. Choose getting rid of all your crap. Choose a higher Human Development Index. Choose being thousands of kilometers far away. Choose devastating your loved ones. Choose different bureaucracies you still don’t understand. Choose calling another place home. Choose not fitting in <em>(you never did anyway!)</em>. Choose saying goodbye to places, food and friends, then choose new places, food, and friends. Choose memories. Choose developing new tastes. Choose being forced to develop social skills. Choose ignorance. Choose mundane and boring activities as exciting adventures. Choose not speaking your mother language. Choose limited self-expression. Choose missing the food from your country, and especially your mum’s. Choose letting part of your heart be elsewhere. Choose adapting 24/7. Choose wondering what the fuck you are doing. And choose getting the answer as soon as you go outside. Choose not understanding jokes from natives. Choose recognising you can do anything, anywhere. Choose not knowing if you should. Choose the bittersweet feeling of moving abroad. Choose to be afraid. Choose your future. Choose life.</p>
<p>But why wouldn’t I want to do a thing like that?</p>
<p>I chose to choose life. And the reasons? There are no reasons. Who needs reasons when you’ve got Berlin?<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>See <a href="https://hellofresh.com">HelloFresh</a>, which helped me relocating to Berlin. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>The entire essay is inspired by Mark Renton’s “Choose Life” speech from <a href="http://www.imdb.com/title/tt0117951">Trainspotting</a>, a movie that makes me think a lot about life choices. <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Choose life. Choose a job. Choose a career. Choose relocation. Choose giving life a &lt;em&gt;fresh&lt;/em&gt;&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>Where Does Growing up Go Wrong?</title>
    <link href="https://diessi.ca/blog/where-does-growing-up-go-wrong/"/>
    <id>https://diessi.ca/blog/where-does-growing-up-go-wrong/</id>
    <published>2017-05-06T22:08:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="epigraph">
<p>Then into your life, there comes a darkness<br />
And a spacecraft blocking out the sky<br />
And there’s nowhere to hide<br />
You run to the back and you cover your ears<br />
But it’s the loudest sound you’ve ever heard <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
<p><cite>Radiohead</cite></p>
</blockquote>
<p>It’s weird. I mean, as small children, we’re <em>truly</em> vulnerable to life. We don’t know how to talk, walk, or take care of ourselves. We rely completely on other people for everything, and we have no clue on how the future looks like – more than ever! We just started, so there are an entire person to make and an entire life to live.</p>
<p>What if we don’t make it? It sounds quite terrifying. Yet, while kids, our hearts don’t race, we sleep well, our stomachs are fine, we don’t avoid things (far from it!), our hands don’t shake, we breath properly, and our chest doesn’t feel tight. At least, not out of the blue.</p>
<p>We find no panic on living, even that we don’t really know anything. We don’t feel overwhelmed about what’s going to happen, and if we do, the thought of it will just come and go – it won’t turn into an obsession.</p>
<p>As we grow, however, we begin knowing a lot. We get aware of things, sometimes too much. Plus, if something is unknown to us, it isn’t hard to get to know it. We get less vulnerable to life, in a sense.</p>
<p>Still, sometimes it feels like all this knowledge and awareness only make us yet more vulnerable to everything, as if something went wrong as we were growing up. It’s even possible that we get so lost in the thought of life itself that we completely forget to live it – a thing a kid wouldn’t ever do.</p>
<p>Well, at least we don’t have an adult’s head while we’re children. If we did, I guess we’d be afraid of everything in such a way that’d never let us really grow up, so we’d only grow old.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>There are things we inevitably get to know in life that disrupts us, and the more we run away from them, the more monstrous they become. This excerpt from Radiohead's <a href="https://genius.com/Radiohead-decks-dark-lyrics">Decks Dark</a> sums up this thought wonderfully. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;epigraph&quot;&gt;
&lt;p&gt;Then into your life, there comes a darkness&lt;br /&gt;
And a spacecraft blocking out the sky&lt;br /&gt;
And there’s n
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>A Minimal Workspace on macOS</title>
    <link href="https://diessi.ca/blog/a-minimal-workspace-on-macos/"/>
    <id>https://diessi.ca/blog/a-minimal-workspace-on-macos/</id>
    <published>2017-05-04T22:45:57.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ask me for a screenshot of my desktop and all you get is a wallpaper – if I’m using any. Everything else is hidden, unless actually requested by me.</p>
<p>That’s the way I work on macOS. The minimal way.</p>
<figure><video class="aligncenter" style="padding: 0; width: 100%;" autoplay="autoplay" loop="loop"><source type="video/mp4" src="../../media/2017/macos_desktop.mp4"></video>
<figcaption>My macOS desktop. This + Spotlight = life. 😎</figcaption></figure>
<p>In my workspace, there are no desktop items, app icons, time clock, battery percentage, transition delays, distracting animations, dashboards or context menus.</p>
<p>Too much information makes it easy for me to get stimulated and then distracted. So I like it minimal.</p>
<h2 id="recipe-for-the-minimal">Recipe for the minimal 👌 <a class="title-anchor" href="#recipe-for-the-minimal" aria-hidden="true">¶</a></h2>
<p><strong>Get rid of everything you can</strong>. Hide. Disable. Assume everything is useless, not useful. <em>(I actually use this approach for life.)</em></p>
<p>You’ll get frustrated sometimes, because there are simple things you want so bad to get rid of but then found out it’s impossible unless you hack things. SRLSY GOTTA LOVE APPLE 😍😍😍</p>
<p>Well, let’s begin! Follow the steps below and type the commands in a <strong>terminal</strong>. If you’re not familiar with a terminal, I’m pretty sure it’s possible to find those settings in “System Preferences” as well.</p>
<p><em>(…But I highly recommend you to open a terminal and start typing around because SRSLY USING A TERMINAL IS LIKE KNOWLEDGE AND POWER 4 UR ENTIRE LIFE!!!)</em></p>
<h3 id="hide-your-desktop">Hide your desktop <a class="title-anchor" href="#hide-your-desktop" aria-hidden="true">¶</a></h3>
<p>It’s easier to live without than to live with it. Disable it and it won’t be something you have to clean up anymore!</p>
<pre><code class="language-bash">defaults <span class="token function">write</span> com.apple.finder CreateDesktop -bool <span class="token boolean">false</span>
</code></pre>
<h3 id="hide-your-dock">Hide your dock <a class="title-anchor" href="#hide-your-dock" aria-hidden="true">¶</a></h3>
<p>It’ll be only shown when you hover it.</p>
<pre><code class="language-bash">defaults <span class="token function">write</span> com.apple.dock autohide -bool <span class="token boolean">true</span>
</code></pre>
<p>Other cool things you can do too to keep your dock clean are:</p>
<pre><code class="language-bash"><span class="token comment" spellcheck="true"># Minimize windows into their application's icon</span>
defaults <span class="token function">write</span> com.apple.dock minimize-to-application -bool <span class="token boolean">true</span>

<span class="token comment" spellcheck="true"># Wipe all (default) app icons from the Dock</span>
defaults <span class="token function">write</span> com.apple.dock persistent-apps -array
</code></pre>
<p>Because I initialise apps from Spotlight, I really don’t mind not having any app in my dock. Sometimes I ask myself why do I have a dock at all. 🤔</p>
<p>And… Launchpad. WHY??? 😭</p>
<h3 id="hide-your-menu-bar">Hide your menu bar <a class="title-anchor" href="#hide-your-menu-bar" aria-hidden="true">¶</a></h3>
<p>It’ll be only shown when you hover it.</p>
<pre><code class="language-bash">defaults <span class="token function">write</span> NSGlobalDomain _HIHideMenuBar -bool <span class="token boolean">true</span>
</code></pre>
<p class="note">I really like this one, but if you feel it's too radical for you, try hiding only menu bar icons with <a href="(http://matthewpalmer.net/vanilla/">Vanilla</a> (recommended) or <a href="https://www.macbartender.com">Bartender</a>.</p>
<h3 id="disable-dashboard">Disable dashboard <a class="title-anchor" href="#disable-dashboard" aria-hidden="true">¶</a></h3>
<p>Why does it even exist? 😒</p>
<pre><code class="language-bash"><span class="token comment" spellcheck="true"># Disable Dashboard</span>
defaults <span class="token function">write</span> com.apple.dashboard mcx-disabled -bool <span class="token boolean">true</span>

<span class="token comment" spellcheck="true"># Don't show Dashboard as a Space</span>
defaults <span class="token function">write</span> com.apple.dock dashboard-in-overlay -bool <span class="token boolean">true</span>
</code></pre>
<h3 id="disable-andor-speed-up-animations">Disable and/or speed up animations <a class="title-anchor" href="#disable-andor-speed-up-animations" aria-hidden="true">¶</a></h3>
<p>Saving some time because I don’t think those really add anything to my user experience on macOS.</p>
<pre><code class="language-bash"><span class="token comment" spellcheck="true"># Disable window animations and Get Info animations</span>
defaults <span class="token function">write</span> com.apple.finder DisableAllAnimations -bool <span class="token boolean">true</span>

<span class="token comment" spellcheck="true"># Remove the auto-hiding Dock delay</span>
defaults <span class="token function">write</span> com.apple.dock autohide-delay -float 0

<span class="token comment" spellcheck="true"># Remove the animation when hiding/showing the Dock</span>
defaults <span class="token function">write</span> com.apple.dock autohide-time-modifier -float 0

<span class="token comment" spellcheck="true"># Don't animate opening applications from the Dock</span>
defaults <span class="token function">write</span> com.apple.dock launchanim -bool <span class="token boolean">false</span>

<span class="token comment" spellcheck="true"># Speed up Mission Control animations</span>
defaults <span class="token function">write</span> com.apple.dock expose-animation-duration -float 0.1
</code></pre>
<p>Finally, restart system stuff:</p>
<pre><code class="language-bash"><span class="token function">killall</span> Finder<span class="token punctuation">;</span> <span class="token function">killall</span> Dock<span class="token punctuation">;</span> <span class="token function">killall</span> SystemUIServer
</code></pre>
<p>And that’s it! 🎉 Life-changing commands for sure. Now just don’t forget cleaning your actual desk too.</p>
<p>For more on the way I work, <a href="http://github.com/diessica/dotfiles">my dotfiles</a> are worth-checking!</p>
<p class="note">Sorry for using too many emojis. Just shipped this feature here on my blog and I can't help myself! 😬</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ask me for a screenshot of my desktop and all you get is a wallpaper – if I’m using any. Everything else is hidden, unless actually reque
    
    </summary>
    
    
      <category term="productivity" scheme="https://diessi.ca/blog/tags/productivity/"/>
    
  </entry>
  
  <entry>
    <title>I Travelled to Photographs</title>
    <link href="https://diessi.ca/blog/i-travelled-to-photographs/"/>
    <id>https://diessi.ca/blog/i-travelled-to-photographs/</id>
    <published>2017-04-19T13:13:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>February was ending.</p>
<p>Usually, such thing would mean regular summer days. However, it wasn’t summer or even a regular day – this was something else.</p>
<p>February 25th was winter. In that cold afternoon, I ended up into a place I’ll never forget: photographs from my phone’s gallery.</p>
<hr>
<p>My steps were slow.</p>
<p>Red bricks erected the walls of houses built on top of an equally red-bricked avenue.</p>
<p>The windows of the houses were made of a wood strategically white-colored to match the brick’s white grouts. With such detail, it was pretty easy to forgive the toughness those bricks carried.</p>
<p>Houses ended themselves in grey roofing shingles. The roofs were all hipped. <em>Houses with hip roofs, gotta love them!</em>, I thought to myself. (Imagine the “V” letter upside down on top of a square – that’s a house with a hip roof.)</p>
<p>Showing a winter that was already leaving, dark trees with dry twigs were in contrast against a white sky – the whitest I’d ever seen in my life. <em>Damn!</em> The whole picture looked like a painting, while the white sky worked as the canvas board on which all that was drawn.</p>
<p>I remember walking and trying to get everything I could, until a freezing wind blew abruptly into my face. It was February, though. From where I come, February meant summer, not freezing winds. Why was February that cold?</p>
<p>In an attempt to clear things up, I told myself what I believed that was true: <em>You’re just looking at photographs from your phone’s gallery. There’s no need to get this excited!</em> Ok. So I was home and looking at the “Wallpapers” album I had on my phone.</p>
<p>A moment later, I found myself facing a large and wonderful canal, in which someone was solitary paddling a boat to somewhere. <em>What a view.</em></p>
<p>Then, self-awareness hit me again: <em>Wait. Isn’t my smartphone in my pocket?</em> How could I be possibly looking at photographs on it?</p>
<p>I immediately started touching my entire body in a desperate hunt for my phone. And there it was. In my fucking coat. It wasn’t really possible for me to see photographs on my phone – that shit was in my pocket all the time.</p>
<p>Besides, why would I be wearing a coat on summer? And, if I was already wearing a coat, how could I be still cold? How inappropriate were my clothes for that weather? Only a person who sensed that winter solely with the eyes would underestimate its coldness like that!</p>
<p>The boat was really leaving through the canal. The view wasn’t photographs. What was all that, then?</p>
<p>I got my phone from my pocket, turned off airplane mode, and opened the Maps app. <em>Come on, where am I?</em></p>
<p>“Noorder Amstelkanaal”, I read. <em>Wow.</em></p>
<p>All of a sudden, February 25th was a cold winter in Amsterdam. My very first one.</p>
<figure><picture><source media="(min-width: 63.125rem)" srcset="../../media/2017/noorder-amstelkanaal.jpg"><source media="(min-width: 45rem)" srcset="../../media/2017/noorder-amstelkanaal.jpg 2x, ../../media/2017/noorder-amstelkanaal_medium.jpg 1x" ><source media="(max-width: 45rem)" srcset="../../media/2017/noorder-amstelkanaal.jpg 2x, ../../media/2017/noorder-amstelkanaal_medium.jpg 1x"><img srcset="../../media/2017/noorder-amstelkanaal.jpg 2x, ../../media/2017/noorder-amstelkanaal_small.jpg 1x" alt="Noorder Amstelkanaal"></picture>
<figcaption>Someone solitary paddling a boat to somewhere in Noorder Amstelkanaal, an Amsterdam's canal.</figcaption></figure>
<p>I guess I travelled to photographs.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;February was ending.&lt;/p&gt;
&lt;p&gt;Usually, such thing would mean regular summer days. However, it wasn’t summer or even a regular day – this wa
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
      <category term="travel" scheme="https://diessi.ca/blog/tags/travel/"/>
    
  </entry>
  
  <entry>
    <title>Catalysis</title>
    <link href="https://diessi.ca/blog/catalysis/"/>
    <id>https://diessi.ca/blog/catalysis/</id>
    <published>2017-04-13T14:27:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>As a High School student, I remember always finding Chemistry something between the boring and intriguing. Still, it isn’t hard to find myself wondering about the science concepts I’ve learned at that time.</p>
<p>Lately, I’ve been particularly thinking about <em>catalysis</em>.</p>
<hr>
<p>In Chemistry, catalysis is the acceleration of a reaction due to the participation of a substance – the “catalyst”.</p>
<p>The way a catalyst induces a reaction to happen faster is intriguing. Curiously, it neither gives the reaction more energy nor change its environmental conditions. Catalysts have an even better strategy: they <strong>lower the amount of energy required</strong> for the reaction to take place.</p>
<figure style="text-align: center;"><picture><img class="normal-img" src="../../media/2017/catalysis-diagram.png" srcset="../../media/2017/catalysis-diagram_2x.png 2x" alt="Diagrama representando conhecimento como ele realmente é"></picture>
<figcaption>Uncatalyzed reaction (solid) vs. catalyzed reaction (dashed). The highest point is the energy required for the reaction to happen. </figcaption></figure>
<p>In a catalysed reaction, then, the same product is obtained for less energy. Bringing this concept to our lives is quite thought-provoking.</p>
<p>Sometimes it isn’t possible for us to achieve something because it demands <em>more</em> time or energy than what we currently have. To deal with this, we then try looking for them in our lives – which mostly means depriving yourself of things.</p>
<p>However, matter of fact is that optimising isn’t always about getting rid of things in your life. If we think of catalysis, we can manage it differently.</p>
<p>What if the problem weren’t the lack of energy or time, but that we’re in need of <em>too much</em> of them in order to get things done? <strong>Having a catalyst would totally figure it out</strong>. Without something that pushes us forward, we’ll always require more energy for the product we want to get.</p>
<p>At this point, you may think your catalyst is your motivation. Motivation is out of our control though – which makes it a goal, not a source. It’s also too ephemeral, and a catalyst mustn’t ever be consumed by an unique reaction, just like in Chemistry. We can’t count on being motivated!</p>
<p>So it goes more like what <em>habitual and practical</em> things in life would give you productivity for less. Is it everyday meditation? A partner by your side? Self-confidence? Inspiring weekends without thinking of work at all? Eating healthy? Going out for a walk every day?</p>
<p>You have to mind what pushes your forward. Catalysts themselves cannot make a reaction happen that wouldn’t happen on its own, but they sure make it occur under less extreme conditions. It’s an improvement when you’re already motivated.</p>
<p>So, what’s your catalyst?</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As a High School student, I remember always finding Chemistry something between the boring and intriguing. Still, it isn’t hard to find m
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>Don&#39;t Blame it on React or Redux</title>
    <link href="https://diessi.ca/blog/dont-blame-it-on-react-or-redux/"/>
    <id>https://diessi.ca/blog/dont-blame-it-on-react-or-redux/</id>
    <published>2017-03-18T16:49:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>What most people don’t know when they first get into Redux is that, just like React, Redux itself is meant to be <strong>simple</strong>. And as seen that simplicity is a goal, both React and Redux <em>won’t</em> and <em>don’t want</em> to tell you how to solve everything.</p>
<p>They won’t tell you how to deal with side effects, or what HTTP request library you should use. That’s completely delegated to the JavaScript ecosystem.</p>
<blockquote>
<p>React and Redux alone don’t do much for really complex web applications.</p>
</blockquote>
<p>React indirectly delegates state management problems to solutions like Flux. On the other hand, Redux, for instance, delegates dealing with async stuff or even the <em>too-much-boilerplate</em> problem that people complain.</p>
<p>But <strong>what motivates React and Redux to be that way?</strong> Some reasons I can think of are:</p>
<ul>
<li>Both libraries are highly focused on their principles, not the built-in stuff. The efficiency of them is on the <em>why</em> and <em>how</em>, not the <em>what</em>.</li>
<li>They aim to be a great fit for both simple <em>and</em> large applications, so the “plug-in-play” approach is followed. (A framework wouldn’t ever do everything a programmer needs anyway…)</li>
<li>Diversity of solutions. Because React and Redux are more like “plug-in-play”, the “plugins” (tools, libraries, middlewares) will evolve by themselves. For instance: <a href="https://github.com/mzabriskie/axios">axios</a>, a HTTP request library, will evolve in parallel to Redux itself – which certainly make things move forward faster!</li>
</ul>
<hr>
<p>If your application’s state is messy, don’t blame it on React.  If you find yourself writing too much boilerplate, don’t blame it on Redux. <strong>React and Redux don’t really do much</strong>, but this is by design.</p>
<p>React is awesome not just because it makes it possible to turn a large and complex application into simple components.</p>
<p>Redux is awesome not just because it makes it effortless to deal with and share state throughout an application.</p>
<p>They’re also awesome because of <strong>their great and diverse ecosystem</strong>. So, when you buy into React or Redux, it’s better for you to buy into their ecosystem too.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;What most people don’t know when they first get into Redux is that, just like React, Redux itself is meant to be &lt;strong&gt;simple&lt;/strong&gt;.
    
    </summary>
    
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
      <category term="react" scheme="https://diessi.ca/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>var that = this? Nah.</title>
    <link href="https://diessi.ca/blog/var-that-this-nah/"/>
    <id>https://diessi.ca/blog/var-that-this-nah/</id>
    <published>2017-03-15T12:00:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Tried JavaScript for some minutes? You probably already wrote the following.</p>
<pre><code class="language-js"><span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>
</code></pre>
<p>(Or one of its variants, such as <code>var self = this</code>.)</p>
<p>That’s a pretty common pattern when you found yourself in a situation where:</p>
<ol>
<li>you have a function nested inside of an object’s method, and</li>
<li>you want to access the object’s properties, but</li>
<li>JavaScript’s <code>this</code> is bound in an unexpected way.</li>
</ol>
<hr>
<p>Workarounding unexpected callback scope is one of the main situations where developers write <code>var self = this</code>.</p>
<p>Let’s assume a piece of code with a callback function.</p>
<pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">Requester</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data

  req<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>You’d expect <code>this.data</code> to be the <code>data</code> argument. Yet, JavaScript tells you that it is actually <code>undefined</code>.</p>
<p>So, because Stack Overflow says so, you do the following:</p>
<pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">Requester</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data
  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// NOOOOOoOooo</span>

  req<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>And never stops doing it in your life.</p>
<p>Still do it? I’m flattered to tell you that <strong>you don’t need that extra variable anymore</strong>.</p>
<h2 id="arrow-functions">Arrow functions <a class="title-anchor" href="#arrow-functions" aria-hidden="true">¶</a></h2>
<p>Go with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">arrow functions</a> instead. Besides having a shorter syntax, arrow functions bind to the parent scope by default.</p>
<p>The scope that was firstly intuitive to you will work as expected now.</p>
<pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">Requester</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data

  req<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// intuitive as hell!</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p class="note">You can count on them most of the time, but they also have unexpected behaviour in more advanced cases. After all, you're dealing with the `this` keyword. So don't just go around refactoring all anonymous functions into arrow ones and expecting everything to work.</p>
<h2 id="you-may-also-bind">You may also <code>.bind()</code>! <a class="title-anchor" href="#you-may-also-bind" aria-hidden="true">¶</a></h2>
<p>If for some reason (such as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Browser_compatibility">no support for IE</a>) you can’t use them, check JavaScript’s <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"><code>bind</code></a>. It’s not as awesome as arrow functions, but does the job.</p>
<pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">Requester</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data

  req<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tried JavaScript for some minutes? You probably already wrote the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keywor
    
    </summary>
    
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Shared Variables Between JavaScript and CSS</title>
    <link href="https://diessi.ca/blog/shared-variables-between-javascript-and-css/"/>
    <id>https://diessi.ca/blog/shared-variables-between-javascript-and-css/</id>
    <published>2017-01-15T17:00:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Because it assures consistency throughout the project and avoids <a href="https://en.m.wikipedia.org/wiki/Magic_number_(programming)">magic numbers</a>, sharing variables between JavaScript and CSS code may help you to keep your project codebase tidy and easier to reason about.</p>
<div class="note">
<p>For this article, when talking about CSS, the word “variable” may mean <a href="https://www.w3.org/TR/css-variables/">custom property</a> or <a href="https://www.w3.org/TR/2016/WD-mediaqueries-4-20160126/#custom-mq">custom media query</a>.</p>
</div>
<h2 id="getting-started">Getting Started <a class="title-anchor" href="#getting-started" aria-hidden="true">¶</a></h2>
<p>First, create a <strong>object</strong> containing your variables and export it.</p>
<p>My JS file containing the object will be called <code>variables.js</code>.</p>
<pre><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  mainColor<span class="token punctuation">:</span> <span class="token string">'#000'</span><span class="token punctuation">,</span>
  secondaryColor<span class="token punctuation">:</span> <span class="token string">'#fff000'</span><span class="token punctuation">,</span>
  fullHeight<span class="token punctuation">:</span> <span class="token string">'100vh'</span>
<span class="token punctuation">}</span>
</code></pre>
<p>No magic is needed to use those variables in your JS files – just <code>import</code> them when you need it. But in order to communicate those variables to your CSS files and use them with <code>var()</code>, some magic is needed.</p>
<p>For this, I will be using <a href="http://cssnext.io/">cssnext</a>, a PostCSS plugin, and injecting that object into our stylesheets as <strong>custom properties</strong>.</p>
<p>Webpack example:</p>
<pre><code class="language-js"><span class="token keyword">import</span> cssNext <span class="token keyword">from</span> <span class="token string">'postcss-cssnext'</span>
<span class="token keyword">import</span> myVars <span class="token keyword">from</span> <span class="token string">'./variables'</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// Entry, loaders, plugins...</span>

  postcss<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>
    <span class="token function">cssNext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      features<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        customProperties<span class="token punctuation">:</span> <span class="token punctuation">{</span> variables<span class="token punctuation">:</span> myVars <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre>
<div class="note">
<p>Since I’m just using <a href="https://github.com/MoOx/postcss-cssnext">postcss-cssnext</a> API, it’s also possible to do it with the build tool of your choice. Check <a href="http://cssnext.io/usage/#features">docs on passing options to cssnext features</a>.</p>
</div>
<h2 id="getting-real-world-with-breakpoints">Getting Real-world with Breakpoints <a class="title-anchor" href="#getting-real-world-with-breakpoints" aria-hidden="true">¶</a></h2>
<p>Sharing breakpoints between JavaScript and your stylesheets is a great real-world example.</p>
<p>It’s time for <code>variables.js</code> to grow then!</p>
<pre><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> properties <span class="token operator">=</span> <span class="token punctuation">{</span>
  mainColor<span class="token punctuation">:</span> <span class="token string">'#000'</span><span class="token punctuation">,</span>
  secondaryColor<span class="token punctuation">:</span> <span class="token string">'#fff000'</span><span class="token punctuation">,</span>
  fullHeight<span class="token punctuation">:</span> <span class="token string">'100vh'</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> mediaQueries <span class="token operator">=</span> <span class="token punctuation">{</span>
  secondaryColor<span class="token punctuation">:</span> <span class="token string">'#fff000'</span><span class="token punctuation">,</span>
  desktop<span class="token punctuation">:</span> <span class="token string">'(min-width: 1024px)'</span><span class="token punctuation">,</span>
  tablet<span class="token punctuation">:</span> <span class="token string">'(min-width: 768px)'</span><span class="token punctuation">,</span>
  mobile<span class="token punctuation">:</span> <span class="token string">'(min-width: 320px)'</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Because it’s not possible to create a media query containing a custom property, we need to inject <code>mediaQueries</code> as <strong>custom media queries</strong>.</p>
<p>Let’s update the previous Webpack example in order to let cssnext to know about both custom media queries and properties.</p>
<pre><code class="language-js"><span class="token keyword">import</span> cssNext <span class="token keyword">from</span> <span class="token string">'postcss-cssnext'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  properties<span class="token punctuation">,</span>
  mediaQueries
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./variables'</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// Entry, loaders, plugins...</span>

  postcss<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>
    <span class="token function">cssNext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      features<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        customProperties<span class="token punctuation">:</span> <span class="token punctuation">{</span> variables<span class="token punctuation">:</span> properties <span class="token punctuation">}</span><span class="token punctuation">,</span>
        customMedia<span class="token punctuation">:</span> <span class="token punctuation">{</span> extensions<span class="token punctuation">:</span> mediaQueries <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Done! Some usage examples for CSS, JS and even React are provided below.</p>
<h3 id="usage">Usage <a class="title-anchor" href="#usage" aria-hidden="true">¶</a></h3>
<h4 id="css-example">CSS Example <a class="title-anchor" href="#css-example" aria-hidden="true">¶</a></h4>
<p>Using custom properties and custom media queries according to settings from <code>variables.js</code> file.</p>
<pre><code class="language-css"><span class="token selector">.banner</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--fullHeight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Custom property */</span>

  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>--desktop<span class="token punctuation">)</span></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* Custom media query */</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="javascript-example">JavaScript example <a class="title-anchor" href="#javascript-example" aria-hidden="true">¶</a></h4>
<div class="note">
<p>Example below uses <a href="http://wicky.nillia.ms/enquire.js/">enquire.js</a> library.</p>
</div>
<pre><code class="language-js"><span class="token keyword">import</span> enquire <span class="token keyword">from</span> <span class="token string">'enquire.js'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> customMedia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./variables'</span>

enquire
  <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>customMedia<span class="token punctuation">.</span>tablet<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Matched tablet resolution'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>customMedia<span class="token punctuation">.</span>mobile<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Matched mobile resolution'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="react-example">React example <a class="title-anchor" href="#react-example" aria-hidden="true">¶</a></h4>
<p>Rendering a component only on desktop resolutions.</p>
<div class="note">
<p>Example below uses <a href="https://github.com/contra/react-responsive">react-responsive</a> library.</p>
</div>
<pre><code class="language-jsx"><span class="token keyword">import</span> MediaQuery <span class="token keyword">from</span> <span class="token string">'react-responsive'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> customMedia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./variables'</span>

<span class="token keyword">function</span> <span class="token function">DesktopOnlyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/* (min-width: 1024px), according to variables.js */</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MediaQuery</span> <span class="token attr-name">query</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span> customMedia<span class="token punctuation">.</span>desktop <span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>My desktop<span class="token operator">-</span>only component<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MediaQuery</span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="final-words">Final Words <a class="title-anchor" href="#final-words" aria-hidden="true">¶</a></h2>
<p>A non-consistent front-end codebase is just messy.</p>
<p>I really use this technique on everyday work, and it’s a cheap way to significantly improve the quality of the front-end codebase.</p>
<p>So, don’t underestimate it! Besides breakpoints, there are infinite possibilities for this, such as project colors, layout dimensions and other shared stuff that can easily get out of hand while working on a large project.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Because it assures consistency throughout the project and avoids &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Magic_number_(programming)&quot;&gt;mag
    
    </summary>
    
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
      <category term="css" scheme="https://diessi.ca/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>How to Exclude CSS, Images, Anything from Unit Tests</title>
    <link href="https://diessi.ca/blog/how-to-exclude-css-images-anything-from-unit-tests/"/>
    <id>https://diessi.ca/blog/how-to-exclude-css-images-anything-from-unit-tests/</id>
    <published>2016-11-19T11:54:29.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="summary">
<p>Your app needs all those <code>require</code>, but your unit tests may not.</p>
</div>
<p>When developing web applications, we deal with assets that our JavaScript tests don’t have to be aware of.</p>
<p>If using Webpack, which enables different imports in your JavaScript files, you’ve configured <a href="https://webpack.github.io/docs/loaders.html">loaders</a> that your test runner probably know nothing about. Therefore, that SVG image in your React component and the <code>import</code>ed CSS will both be parsed like JavaScript in your tests. A lot of confusing errors will be thrown, of course.</p>
<p>So let’s learn to exclude anything your unit tests, from styles (CSS, Sass), images (PNG, SVG), to other specific imports (like <a href="https://diessi.ca/blog/svg-images-as-react-components-with-webpack/">SVG images as React components</a>).</p>
<h2 id="hook-your-require-calls">Hook your <code>require()</code> calls <a class="title-anchor" href="#hook-your-require-calls" aria-hidden="true">¶</a></h2>
<p>By intercepting <code>require()</code> calls, you can make your testing framework ignore <strong>what you want</strong> to be ignored <strong>the way you want</strong> it to be ignored.</p>
<p>It’s also useful in isomorphic setups.</p>
<h3 id="return-an-empty-module">Return an empty module <a class="title-anchor" href="#return-an-empty-module" aria-hidden="true">¶</a></h3>
<p>It all comes to returning an empty module for unwanted imports. It looks like this:</p>
<pre><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">''</span>
</code></pre>
<h3 id="jest">Jest <a class="title-anchor" href="#jest" aria-hidden="true">¶</a></h3>
<p>For Jest, configure <a href="https://facebook.github.io/jest/docs/configuration.html#modulenamemapper-object-string-string">moduleNameMapper</a> to return the empty module for specific extensions. Example:</p>
<pre><code class="language-json"><span class="token property">"jest"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"moduleNameMapper"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    "\\.(css|jpg|png<span class="token punctuation">)</span>$"<span class="token operator">:</span> <span class="token string">"&lt;rootDir>/empty-module.js"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="other-testing-frameworks">Other testing frameworks <a class="title-anchor" href="#other-testing-frameworks" aria-hidden="true">¶</a></h3>
<p><a href="https://www.npmjs.com/package/require-hacker">require-hacker</a> is an option for hooking <code>require()</code> calls.</p>
<div class="note">
<p>You can also use built-in compilers (like moduleNameMapper in Jest or <a href="https://mochajs.org/#compilers">Mocha compilers</a>), or even only import <a href="https://github.com/bkonkle/ignore-styles">ignore-styles</a> into your testing framework (which is preconfigured).</p>
</div>
<p>I’ll stick to require-hacker and custom configuration because there’s more flexibility.</p>
<p>Get it from npm:</p>
<pre><code class="language-sh">npm install require-hacker --save-dev
</code></pre>
<h4 id="configure">Configure <a class="title-anchor" href="#configure" aria-hidden="true">¶</a></h4>
<p>Create a JavaScript file and set custom handlers for specific extensions using require-hacker’s <a href="https://github.com/halt-hammerzeit/require-hacker#hookfile_extension-resolve">hook()</a> method.</p>
<p>Assuming you want to ignore CSS and PNG files, always return an empty module for them:</p>
<pre><code class="language-js"><span class="token keyword">import</span> requireHacker <span class="token keyword">from</span> <span class="token string">'require-hacker'</span>
requireHacker<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span><span class="token string">'png'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'module.exports = ""'</span><span class="token punctuation">)</span>
requireHacker<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span><span class="token string">'css'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'module.exports = ""'</span><span class="token punctuation">)</span>
</code></pre>
<div class="note">
<p>Because you’re smart, you’ll store all extensions in a variable and <code>forEach</code> them, so there’s no need to repeat yourself. <a href="https://gist.github.com/diessica/e6a6ea601d2b19cdcc6881197b6b5c8d">Example</a>.</p>
</div>
<h4 id="import-into-your-test-runner">Import into your test runner <a class="title-anchor" href="#import-into-your-test-runner" aria-hidden="true">¶</a></h4>
<p>Let your favourite testing framework know about the <code>require</code> hacking! Some examples, assuming a <code>ignore-utils.js</code> file:</p>
<h5 id="mocha">Mocha <a class="title-anchor" href="#mocha" aria-hidden="true">¶</a></h5>
<p>Add to your <a href="https://mochajs.org/#mochaopts">mocha.opts</a>, or use the <code>--require</code> flag:</p>
<pre><code class="language-sh">mocha --require ./ignore-utils
</code></pre>
<h5 id="ava">ava <a class="title-anchor" href="#ava" aria-hidden="true">¶</a></h5>
<p>Add to your <code>package.json</code>:</p>
<pre><code class="language-json"><span class="token property">"ava"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"require"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"./ignore-utils"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now some files will be treated like shit in your JavaScript tests – which is AWESOME!</p>
<h2 id="bonus-react-null-component">Bonus: React null component <a class="title-anchor" href="#bonus-react-null-component" aria-hidden="true">¶</a></h2>
<p>You don’t need to load that boring SVG icon of a house to test that critical feature in a React component, right?</p>
<p><em>Right.</em> In case you’re using <a href="https://github.com/sairion/svg-inline-loader">svg-inline-loader</a>, which transform your SVG files into React components, you cannot just return an empty module because your test case would be actually expecting a React component. Things will break. Annoying errors will be shown.</p>
<p>So, instead of returning an empty module for SVG files, return an empty React component. Let’s set a custom handler for that!</p>
<h3 id="configure-2">Configure <a class="title-anchor" href="#configure-2" aria-hidden="true">¶</a></h3>
<div class="note">
<p>This example uses require-hacker. For Jest, export a React null component and set it in <code>moduleNameMapper</code>.</p>
</div>
<pre><code class="language-js"><span class="token keyword">import</span> requireHacker <span class="token keyword">from</span> <span class="token string">'require-hacker'</span>

<span class="token keyword">const</span> reactNullComponent <span class="token operator">=</span> <span class="token template-string"><span class="token string">`
  require('react').createClass({
    render() {
      return null;
    }
  })
`</span></span>
requireHacker<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`module.exports = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>reactNullComponent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>
</code></pre>
<h2 id="conclusion">Conclusion <a class="title-anchor" href="#conclusion" aria-hidden="true">¶</a></h2>
<p>I’ve spent a lot of time figuring out how to make everything work, because:</p>
<ol>
<li>At the beginning, it was quite confusing to get what was clearly going on.</li>
<li>There’s a ton of options out there (Webpack null loaders; <a href="https://github.com/bkonkle/ignore-styles">ignore-styles</a>, which also provide custom handlers; <a href="https://github.com/morlay/babel-plugin-transform-require-ignore">babel-plugin-transform-require-ignore</a>…).</li>
<li>I didn’t want to handle all the ignored extensions the same say.</li>
</ol>
<p>Yeah… Sometimes our JavaScript unit tests just know too much.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;summary&quot;&gt;
&lt;p&gt;Your app needs all those &lt;code&gt;require&lt;/code&gt;, but your unit tests may not.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When developing web appli
    
    </summary>
    
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
      <category term="react" scheme="https://diessi.ca/blog/tags/react/"/>
    
      <category term="test" scheme="https://diessi.ca/blog/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>A Bit on Random Numbers in JavaScript</title>
    <link href="https://diessi.ca/blog/a-bit-on-random-numbers-in-javascript/"/>
    <id>https://diessi.ca/blog/a-bit-on-random-numbers-in-javascript/</id>
    <published>2016-11-15T18:50:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Math.random()</code> is a JavaScript function that outputs a random number in the range <code>[0, 1)</code>  (from 0 up to 1, but doesn’t include 1). It’s the main source of randomness in JavaScript.</p>
<p>Although the output looks random, it’s actually not.</p>
<h2 id="behind-the-scenes">Behind the Scenes <a class="title-anchor" href="#behind-the-scenes" aria-hidden="true">¶</a></h2>
<p><code>Math.random()</code> uses a <strong>pseudo-random number generator</strong> (PRNG). Those algorithms work completely determined by a initial value called “seed”.</p>
<blockquote>
<p>Given a seed, the sequence of random numbers is deterministic.</p>
</blockquote>
<p>Every PRNG requires a seed, which <em>generally</em> is the current system time in milliseconds. Yeah, simple as that.</p>
<p>Speaking of JavaScript language, the PRNG algorithm to deal with the seed is left up to implementors<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. The algorithm powering V8’s <code>Math.random()</code> was very poor quality until last year (2015), and implementations between engines were pretty inconsistent.</p>
<p>But the scenario has changed. Currently, JavaScript Engines such as SpiderMonkey, V8, Webkit and Chakra all implements <a href="https://en.wikipedia.org/wiki/Xorshift">Xorshift128+</a> algorithm<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>, faster than the previous one.</p>
<h2 id="secure-randomness">Secure Randomness <a class="title-anchor" href="#secure-randomness" aria-hidden="true">¶</a></h2>
<p>Although randomness was improved in most JavaScript engines, it isn’t trustworthy as seen that standard PRNGs are highly predictable after a certain period. That’s where Web Crypto API shines!</p>
<p><a href="https://www.w3.org/TR/WebCryptoAPI/">Web Cryptography API</a> introduces <code>window.crypto.getRandomValues</code>, a cryptographically secure pseudo-random number generator (CSPNG), whose output is impossible or highly improbable to distinguish from a truly random one.</p>
<h3 id="example">Example <a class="title-anchor" href="#example" aria-hidden="true">¶</a></h3>
<pre><code class="language-js"><span class="token comment" spellcheck="true">// Array containing two 32-bit integers</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Int32Array</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// Override array integers with random values</span>
<span class="token keyword">const</span> random <span class="token operator">=</span> crypto<span class="token punctuation">.</span><span class="token function">getRandomValues</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> random<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>random<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p class="note">Of course it comes at a performance cost, so make sure you really need secure random numbers in your program.</a> 
<h2 id="conclusion">Conclusion <a class="title-anchor" href="#conclusion" aria-hidden="true">¶</a></h2>
<p>If you need apparent randomness–less and speed, you’d probably better off using <code>Math.random()</code>. If you need high-quality randomness, such as in cryptography applications, hashing or statistics, go for a CSPNG such as <code>window.crypto.getRandomValues</code> instead.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>See <a href="https://tc39.github.io/ecma262/#sec-math.random">ES2015 spec on <code>Math.random()</code></a>. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>Sources: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=322529">SpiderMonkey</a>, <a href="http://v8project.blogspot.com.br/2015/12/theres-mathrandom-and-then-theres.html">V8</a>, <a href="https://bugs.webkit.org/show_bug.cgi?id=151641">Webkit</a>, <a href="https://github.com/Microsoft/ChakraCore/pull/145">Chakra</a>. <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Math.random()&lt;/code&gt; is a JavaScript function that outputs a random number in the range &lt;code&gt;[0, 1)&lt;/code&gt;  (from 0 up to 1, but d
    
    </summary>
    
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Horizontal and Vertical Align Anything with CSS</title>
    <link href="https://diessi.ca/blog/horizontal-and-vertical-align-anything-with-css/"/>
    <id>https://diessi.ca/blog/horizontal-and-vertical-align-anything-with-css/</id>
    <published>2016-11-06T21:10:01.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Using <code>translate()</code> is one of the easiest ways<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> to instantly horizontal and vertical align any element with CSS without knowing its dimensions.</p>
<h2 id="vertical-align">Vertical Align <a class="title-anchor" href="#vertical-align" aria-hidden="true">¶</a></h2>
<p>You probably know the “<a href="http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/">vertical align with just 3 lines of CSS</a>” trick, which uses <code>translateY()</code>.</p>
<pre><code class="language-css"><span class="token selector">.my-element</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="horizontal-align">Horizontal Align <a class="title-anchor" href="#horizontal-align" aria-hidden="true">¶</a></h2>
<p>But did you know it’s also possible to use <code>translate()</code> to horizontal align elements?</p>
<pre><code class="language-css"><span class="token selector">.my-element</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="vertical-and-horizontal-align">Vertical and Horizontal Align <a class="title-anchor" href="#vertical-and-horizontal-align" aria-hidden="true">¶</a></h2>
<p>​	Mixing both, we can horizontal and vertical align anything!</p>
<pre><code class="language-css"><span class="token selector">.my-element</span> <span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<div class="note">
<p>See <a href="http://output.jsbin.com/dusesi">JSBin</a>.</p>
</div>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Flexbox also provides a great solution. See <a href="https://philipwalton.github.io/solved-by-flexbox/demos/vertical-centering/">Solved by Flexbox: Vertical Centering</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Using &lt;code&gt;translate()&lt;/code&gt; is one of the easiest ways&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; to instantly 
    
    </summary>
    
    
      <category term="css" scheme="https://diessi.ca/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Solitude</title>
    <link href="https://diessi.ca/blog/solitude/"/>
    <id>https://diessi.ca/blog/solitude/</id>
    <published>2016-11-01T02:20:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="summary">
<p>A state in which people are locked in their own heads. Where everything they do makes sense.</p>
</div>
<p>I was a young girl when I started to get into computers. Definitely spent a lot of time alone, so I’ve ended up entering adult life with a lot of thoughts that only made sense in my head.</p>
<p>One of them was that solitude is <strong>freedom</strong>.</p>
<hr>
<p>Years ago, I read a book called called <a href="https://www.goodreads.com/book/show/16631.Steppenwolf">Steppenwolf</a>. The book talks about Harry Haller, a man who proudly craved solitude. At some point, he says:</p>
<p><em>“Solitude is independence. It had been my wish and with the years I had attained it. It was cold. Oh, cold enough! But it was also still, wonderfully still and vast like the cold stillness of space in which the stars revolve.”</em></p>
<p>Maybe <strong>independence</strong> is the word I couldn’t come up with.</p>
<hr>
<p>I’d think: <em>I’m on my own, after all. Who could ever possibly stop or judge me?</em> Think about the question. <em>Nobody, right?</em></p>
<p>It’s just easy to get it all wrong. At that time, of course I was wrong about the answer.  I forgot an important person: me. Nobody could ever stop or judge me… Except <em>myself</em>. When you’re alone, you still have your own company – and I’ve neglected this part.</p>
<p>Our minds just cannot handle being open only to ourselves. Inevitably, dark thoughts are made up; however they aren’t perceived as irrational unless you leave your own world.</p>
<p>So it didn’t take longer for me to start judging and stopping myself harder than people could ever do. Does it sound like freedom?</p>
<p>Years after, I don’t think so.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;summary&quot;&gt;
&lt;p&gt;A state in which people are locked in their own heads. Where everything they do makes sense.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I was a 
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>A Better ES2015+ and JSX Workflow in VS Code</title>
    <link href="https://diessi.ca/blog/a-better-es2015-and-jsx-workflow-in-vs-code/"/>
    <id>https://diessi.ca/blog/a-better-es2015-and-jsx-workflow-in-vs-code/</id>
    <published>2016-10-30T02:00:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Lately I’ve been trying <a href="https://code.visualstudio.com">VS Code</a>, a code editor based on <a href="http://electron.atom.io/">Electron</a>. Since then, it really surprised me and it’s been a nice coding experience.</p>
<h2 id="but">But… <a class="title-anchor" href="#but" aria-hidden="true">¶</a></h2>
<p>By default, JS syntax highlighting and ES2015+ and JSX support don’t work as expected.</p>
<p>I’ve tried to workaround it by using:</p>
<ol>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-atom-grammar">Atom grammar</a>. JSX support was pretty bad.</li>
<li>A <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.typescript-javascript-grammar">development branch of VS Code colorization</a>, which is delivered as an extension. Finally got JSX to work properly, but syntax highlighting was still missing something.</li>
</ol>
<p>So, no success.</p>
<h2 id="improving-your-vs-code-workflow">Improving your VS Code workflow <a class="title-anchor" href="#improving-your-vs-code-workflow" aria-hidden="true">¶</a></h2>
<p>After much trial and error, I came up with a better JS workflow in VS Code.</p>
<h3 id="1-fix-js-syntax-highlighting">1. Fix JS syntax highlighting <a class="title-anchor" href="#1-fix-js-syntax-highlighting" aria-hidden="true">¶</a></h3>
<p>Install the <a href="https://marketplace.visualstudio.com/items?itemName=joshpeng.sublime-babel-vscode">Sublime Babel extension</a> and make sure you’re using one of the suggested color themes. (I like <a href="https://marketplace.visualstudio.com/items?itemName=joshpeng.theme-charcoal-oceanicnext">Charcoal Oceanic Next</a>!)</p>
<h3 id="2-use-javascript-react-in-js-files">2. Use “JavaScript React” in .js files <a class="title-anchor" href="#2-use-javascript-react-in-js-files" aria-hidden="true">¶</a></h3>
<p>VS Code only uses “JavaScript React” syntax in <code>.jsx</code> files. Add the following to your User (or Workspace) Settings:</p>
<pre><code class="language-json"><span class="token property">"files.associations"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"*.js"</span><span class="token operator">:</span> <span class="token string">"javascriptreact"</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="3-enable-emmet-for-jsx">3. Enable Emmet for JSX <a class="title-anchor" href="#3-enable-emmet-for-jsx" aria-hidden="true">¶</a></h3>
<p>(That’s a plus!)</p>
<p>VS Code uses Emmet by default, but doesn’t enable it for <code>.jsx</code> files. Add the following to your User Settings:</p>
<pre><code class="language-json"><span class="token property">"emmet.syntaxProfiles"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">"javascript"</span><span class="token operator">:</span> <span class="token string">"jsx"</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="lets-improve-vs-code">Let’s improve VS Code! <a class="title-anchor" href="#lets-improve-vs-code" aria-hidden="true">¶</a></h2>
<p>There has been <a href="https://code.visualstudio.com/updates#_preview-typescript-javascript-grammar">improvements for JS grammar</a> already, but it’s still not perfect.</p>
<p>Fortunately, VS Code is an <strong><a href="https://github.com/Microsoft/vscode">open source project</a></strong> and can be improved by developers like us! Let’s not leave it like this. Give useful feedback and help!</p>
<p>Happy coding!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lately I’ve been trying &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;VS Code&lt;/a&gt;, a code editor based on &lt;a href=&quot;http://electron.atom.io/&quot;&gt;El
    
    </summary>
    
    
      <category term="react" scheme="https://diessi.ca/blog/tags/react/"/>
    
      <category term="workflow" scheme="https://diessi.ca/blog/tags/workflow/"/>
    
  </entry>
  
  <entry>
    <title>I&#39;m Tired of Beautiful-Looking User Interfaces</title>
    <link href="https://diessi.ca/blog/i-m-tired-of-beautiful-looking-interfaces/"/>
    <id>https://diessi.ca/blog/i-m-tired-of-beautiful-looking-interfaces/</id>
    <published>2016-10-23T14:50:35.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="summary">
<p>What if the user interface is more beautiful-looking than <strong>usable</strong>, <strong>understandable</strong>, and <strong>intuitive</strong>?</p>
</div>
<p>The visual aspects of an user interface play an essential role in organising information. Once you’ve got the resources, however, that turns out to be the easiest part of an Interface Design process.</p>
<hr>
<p>Sure we like things that look nice, but looking nice doesn’t compensate a bad product design. <strong>Visual communication should not compensate flaws.</strong></p>
<p>If you spend most of the time looking for visual inspiration rather than conducting research, doing usability tests, and studying metrics such as business goals and conversion rates, you will probably come up with a interface that only looks beautiful.</p>
<p>And I’m tired of beautiful-looking interfaces.</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;summary&quot;&gt;
&lt;p&gt;What if the user interface is more beautiful-looking than &lt;strong&gt;usable&lt;/strong&gt;, &lt;strong&gt;understandable&lt;/strong&gt;,
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
      <category term="design" scheme="https://diessi.ca/blog/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>Encadeamento de Métodos em JavaScript</title>
    <link href="https://diessi.ca/blog/encadeamento-de-metodos-em-javascript/"/>
    <id>https://diessi.ca/blog/encadeamento-de-metodos-em-javascript/</id>
    <published>2016-08-06T19:11:32.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Popular em diversas bibliotecas JavaScript, o encadeamento de métodos (<em>“method chaining”</em>) é uma técnica usada para invocar diversos métodos em um mesmo objeto.</p>
<p>Com o objetivo de <strong>melhorar a legibilidade do código</strong>, a técnica é vastamente utilizada na API da jQuery, o que certamente influenciou na popularidade da biblioteca.</p>
<p>Se você já utilizou jQuery, o estilo do código abaixo pode ser familiar:</p>
<pre><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#my-element'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background'</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token number">250</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<div class="note">
<p>No exemplo acima, uma única declaração faz várias coisas. No entanto, uma boa prática com <em>method chaining</em> é <strong>fazer somente uma ação por declaração</strong>. 😉</p>
</div>
<p>Perceba que vários métodos são invocados no objeto <code>$('#my-element')</code>, sem a necessidade de repetí-lo. Já sem <em>Method Chaining</em>, é necessário fazer a referência diversas vezes:</p>
<pre><code class="language-js"><span class="token keyword">const</span> myElement <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#my-element'</span><span class="token punctuation">)</span>
myElement<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background'</span><span class="token punctuation">,</span> <span class="token string">'purple'</span><span class="token punctuation">)</span>
myElement<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
myElement<span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="exemplo">Exemplo <a class="title-anchor" href="#exemplo" aria-hidden="true">¶</a></h2>
<p>Vamos criar um contador <code>Counter</code>:</p>
<pre><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
  constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>

  increase <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>

  decrease <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>

  log <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Agora, vamos instanciar um contador e usar seus métodos:</p>
<pre><code class="language-js"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
counter<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
counter<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 1</span>
counter<span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
counter<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 0</span>
</code></pre>
<p>Perceba que é necessário fazer várias declarações para interagir com a instância, o que prejudica a legibilidade do código.</p>
<p>E se tentarmos usar <em>Method Chaining</em>…</p>
<pre><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// > TypeError: Cannot read property 'log' of undefined</span>
</code></pre>
<p>Perceba que <code>log()</code> está sendo executado em <code>new Counter().increase()</code>, que, por sua vez, está retornando <code>undefined</code>. Portanto, ainda não é possível interagir com <code>Counter</code> dessa forma.</p>
<h2 id="como-encadear-metodos">Como Encadear Métodos <a class="title-anchor" href="#como-encadear-metodos" aria-hidden="true">¶</a></h2>
<p>Para evitar a repetição do objeto, é necessário que seus métodos retornem o próprio objeto.</p>
<p>Veja este exemplo com Promises:</p>
<pre><code class="language-js"><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'users.json'</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span>parse<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Olha o JSON!"</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Falhou!"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>Isso só é possível pois os métodos <code>then()</code> and <code>catch()</code> sempre retornam outras promises. Assim, podemos dizer que as Promises são <strong>fluent APIs</strong>, tal como a jQuery.</p>
<h3 id="quem-lembra-do-this">Quem Lembra do <code>this</code>? <a class="title-anchor" href="#quem-lembra-do-this" aria-hidden="true">¶</a></h3>
<p>Para os métodos serem encadeados, será necessário retornar o contexto (<code>this</code>) em cada método.</p>
<blockquote>
<p>Em JavaScript, <code>this</code>  sempre se refere ao contexto de execução de função.</p>
</blockquote>
<p>No caso de um método, que é uma função de um objeto, refere-se ao próprio objeto.</p>
<h4 id="exemplo-com-method-chaining-pattern">Exemplo com <em>Method Chaining Pattern</em> <a class="title-anchor" href="#exemplo-com-method-chaining-pattern" aria-hidden="true">¶</a></h4>
<p>Para implementar o encadeamento de métodos na classe <code>Counter</code>, apenas retornamos seu contexto a cada método:</p>
<pre><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
  constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
  increase <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// Aqui!</span>
  <span class="token punctuation">}</span>
  decrease <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// Aqui!</span>
  <span class="token punctuation">}</span>
  log <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// E aqui!</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Agora, ao executar <code>new Counter().increase()</code>, o retorno já não será mais <code>undefined</code>.</p>
<p>…E, portanto, é possível fazer <em>method chaining</em>!</p>
<pre><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 1</span>
  <span class="token punctuation">.</span><span class="token function">decrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 0</span>
</code></pre>
<h2 id="conclusao">Conclusão <a class="title-anchor" href="#conclusao" aria-hidden="true">¶</a></h2>
<p>No universo de APIs orientadas a objetos, o encadeamento de métodos é uma técnica incrível se o seu objetivo é tornar o código mais expressivo e fluente.</p>
<p>No geral, <em>fluent APIs</em> são sim interessantes de se entender e implementar, e você pode ter certeza disso analisando o primeiro exemplo com jQuery do início deste artigo. É fantástico! Mas é importante entender que <strong>o encadeamento de métodos nem sempre tornará as coisas mais fáceis</strong> (debugar, por exemplo, se torna mais difícil), e, portanto, a maneira aparentemente “mágica” com que elas funcionam não deve ser sempre levada em consideração.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Popular em diversas bibliotecas JavaScript, o encadeamento de métodos (&lt;em&gt;“method chaining”&lt;/em&gt;) é uma técnica usada para invocar diver
    
    </summary>
    
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>SVG Images as React Components with Webpack</title>
    <link href="https://diessi.ca/blog/svg-images-as-react-components-with-webpack/"/>
    <id>https://diessi.ca/blog/svg-images-as-react-components-with-webpack/</id>
    <published>2016-08-03T01:00:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you’ve ever tried to load inline SVG (using <a href="https://github.com/sairion/svg-inline-loader">svg-inline-loader</a>) into React, you know it seriously hurts people’s eyes.</p>
<pre><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> IconRemove <span class="token keyword">from</span> <span class="token string">'./icons/remove.svg'</span>
<span class="token keyword">const</span> RemoveButton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">dangerouslySetInnerHTML</span><span class="token attr-value"><span class="token punctuation">=</span>&lt;!--￼0--</span><span class="token punctuation">></span></span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Remove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span>
</code></pre>
<p>So what if it looked like this instead?</p>
<pre><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> IconRemove <span class="token keyword">from</span> <span class="token string">'./icons/remove.svg'</span>
<span class="token keyword">const</span> RemoveButton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IconRemove</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Remove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span>
</code></pre>
<p>Much better, don’t you think?</p>
<p>That’s what <a href="https://github.com/jhamlet/svg-react-loader">svg-react-loader</a> does. It <strong>process your SVG file and returns a React component</strong>, which is compiled with Babel (more on this below).</p>
<h2 id="using-the-loader">Using the Loader <a class="title-anchor" href="#using-the-loader" aria-hidden="true">¶</a></h2>
<pre><code class="language-sh">npm install svg-react-loader --save-dev
</code></pre>
<div class="note">
<p>Refer to <a href="https://webpack.github.io/docs/using-loaders.html#usage">Webpack docs</a> for more information on loaders usage. Also, make sure you have installed <a href="https://github.com/jhamlet/svg-react-loader#dependencies">svg-react-loader’s dependencies</a>.</p>
</div>
<h3 id="1-in-module-request">1. In Module Request <a class="title-anchor" href="#1-in-module-request" aria-hidden="true">¶</a></h3>
<p>The simplest method, although the configuration convention is preferred. Using svg-react-loader and <a href="https://github.com/babel/babel-loader">babel-loader</a>, import your icon just like:</p>
<pre><code class="language-js"><span class="token keyword">import</span> IconRemove <span class="token keyword">from</span> <span class="token string">'babel!svg-react!./icons/remove.svg'</span>
</code></pre>
<h3 id="2-in-webpack-config-file-recommended">2. In Webpack Config File (Recommended) <a class="title-anchor" href="#2-in-webpack-config-file-recommended" aria-hidden="true">¶</a></h3>
<p>Add in your Webpack configuration file’s <code>loaders</code> array.</p>
<pre><code class="language-js"><span class="token punctuation">{</span>
  test<span class="token punctuation">:</span> <span class="token regex">/\.svg$/</span><span class="token punctuation">,</span>
  loader<span class="token punctuation">:</span> <span class="token string">'babel!svg-react'</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Import your icon just like:</p>
<pre><code class="language-js"><span class="token keyword">import</span> IconRemove <span class="token keyword">from</span> <span class="token string">'./icons/remove.svg'</span>
</code></pre>
<h2 id="usage-examples">Usage Examples <a class="title-anchor" href="#usage-examples" aria-hidden="true">¶</a></h2>
<p>Loader in module request method (1):</p>
<pre><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> IconRemove <span class="token keyword">from</span> <span class="token string">'babel!svg-react!./icons/remove.svg'</span>
<span class="token keyword">const</span> RemoveButton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IconRemove</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Remove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span>
</code></pre>
<p>Loader in Webpack config file method (2):</p>
<pre><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> IconRemove <span class="token keyword">from</span> <span class="token string">'./icons/remove.svg'</span>
<span class="token keyword">const</span> RemoveButton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IconRemove</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Remove<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span>
</code></pre>
<h2 id="a-note-on-svg-loaders">A Note on SVG Loaders <a class="title-anchor" href="#a-note-on-svg-loaders" aria-hidden="true">¶</a></h2>
<p>Sometimes, we don’t want all of our SVG files to be loaded as React components. If you use a SVG in a <code>img</code> element, for example, it may lead to conflicts. Fortunately, you can avoid them by being more specific in <code>test</code> regular expression:</p>
<pre><code class="language-js"><span class="token punctuation">{</span>
  test<span class="token punctuation">:</span> <span class="token regex">/\.inline.svg$/</span><span class="token punctuation">,</span>
  loader<span class="token punctuation">:</span> <span class="token string">'babel!svg-react'</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span>
  test<span class="token punctuation">:</span> <span class="token regex">/\.jpe?g$|\.gif$|\.png$|^(?!.*\.inline\.svg$).*\.svg$/</span><span class="token punctuation">,</span>
  loader<span class="token punctuation">:</span> <span class="token string">'url'</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now, only SVG files ending with <code>.inline.svg</code> will be loaded as React components. You’re good to go!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you’ve ever tried to load inline SVG (using &lt;a href=&quot;https://github.com/sairion/svg-inline-loader&quot;&gt;svg-inline-loader&lt;/a&gt;) into React, 
    
    </summary>
    
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
      <category term="react" scheme="https://diessi.ca/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>A Cascata das Variáveis do CSS</title>
    <link href="https://diessi.ca/blog/a-cascata-das-variaveis-do-css/"/>
    <id>https://diessi.ca/blog/a-cascata-das-variaveis-do-css/</id>
    <published>2016-05-31T01:00:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align: center"><a href="http://caniuse.com/#feat=css-variables">Suporte</a> | <a href="https://www.w3.org/TR/css-variables/">Especificação</a></p>
<p>Muito embora todos os seres humanos do Planeta Terra tenham odiado sua sintaxe, as variáveis finalmente chegaram ao CSS – e elas são mais poderosas do que você imagina!</p>
<hr>
<p class="note">Esse artigo faz parte da série <a href="/blog/o-css-do-futuro">O CSS do Futuro</a>.</p>
<h2 id="motivacao">Motivação <a class="title-anchor" href="#motivacao" aria-hidden="true">¶</a></h2>
<p>O desenvolvimento de grandes aplicações web implica inevitavelmente em grandes folhas de estilo, que devem ser organizadas de forma que facilite a manutenção. Muitos valores definidos para propriedades são repetidos, quando poderiam ser reutilizados e padronizados, de forma compartilhada, pela folha de estilo.</p>
<p>Nesse contexto, surgem as variáveis no CSS, também chamadas de <em>Custom Properties</em> – pois, tecnicamente, é isso que elas são.</p>
<h2 id="definicao">Definição <a class="title-anchor" href="#definicao" aria-hidden="true">¶</a></h2>
<p>As <em>Custom Properties</em> são propriedades CSS customizadas (ou seja, você configura o seu valor) iniciadas com <code>--</code>, de nome <em>case-sensitive</em>, e que são utilizadas no documento através da função <code>var()</code>.  Por serem propriedades, é importante compreender que seu comportamento é idêntico ao de uma propriedade qualquer do CSS (guarde essa informação!).</p>
<h3 id="exemplo">Exemplo <a class="title-anchor" href="#exemplo" aria-hidden="true">¶</a></h3>
<pre><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">--colorPrimary</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">a</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--colorPrimary<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>(Eu não conheço ninguém que gosta da ideia esplêndida do <code>--</code>. Mas elas não vão deixar de iniciar com <code>--</code> se você reclamar. Inclusive, <a href="http://www.xanthir.com/blog/b4KT0">isso já foi discutido o suficiente</a>.)</p>
<h2 id="a-funcao-var">A função <code>var()</code> <a class="title-anchor" href="#a-funcao-var" aria-hidden="true">¶</a></h2>
<p>Quem viabiliza o uso de <em>Custom Properties</em>? Ela:</p>
<pre><code class="language-css"><span class="token function">var</span><span class="token punctuation">(</span> &lt;custom-property-name> [, &lt;declaration-value> ]? <span class="token punctuation">)</span>
</code></pre>
<p>O primeiro parâmetro é o nome da propriedade, e o segundo, opcional, é o valor a ser usado como <em>fallback</em> caso o primeiro argumento seja inválido (por exemplo: uma variável com <code>20px</code> sendo usada como valor de um <code>background</code>, ou variável inexistente).</p>
<h2 id="escopo">Escopo <a class="title-anchor" href="#escopo" aria-hidden="true">¶</a></h2>
<p>Cascata, especificidade, herança… Esses conceitos são muito importantes para entender o poder das variáveis do CSS – e do CSS no geral, eu diria.</p>
<p>Aqui, uma das informações mais importantes deste artigo:</p>
<blockquote>
<p>As <em>Custom Properties</em> seguem <strong>regras de cascata</strong> tal como qualquer outra propriedade do CSS.</p>
</blockquote>
<p>Por isso, quando quisermos que a variável esteja disponível “globalmente” (para todos os seletores), a declaramos no seletor <code>:root</code>, que é o próprio documento HTML. Isso acontece pois <strong>o efeito cascata do CSS permite que todos seus descendentes herdem a propriedade.</strong> Legal, né?</p>
<p>A propriedade customizada, tal como qualquer outra propriedade, pode ser sobreescrita através de seletores. Seu valor será definido de acordo com a <strong>especifidade</strong> deles.</p>
<div class="note">
<p>A implementação de <em>Custom Properties</em> do CSSNext não segue regras de cascata. Apenas variáveis declaradas no <code>:root</code> são válidas. 😦</p>
</div>
<h3 id="exemplo-2">Exemplo <a class="title-anchor" href="#exemplo-2" aria-hidden="true">¶</a></h3>
<pre><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">--bgColor</span><span class="token punctuation">:</span> indianred<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">--bgColor</span><span class="token punctuation">:</span> darkseagreen<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#wow</span> <span class="token punctuation">{</span>
  <span class="token property">--bgColor</span><span class="token punctuation">:</span> darkcyan<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bgColor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Nesse caso:</p>
<ul>
<li>Todos os elementos são vermelhos.</li>
<li>Exceto elementos <code>div</code> e seus filhos, que seriam verdes.</li>
<li>Exceto o elemento com id <code>wow</code> e seus filhos, que seriam ciano.</li>
</ul>
<hr>
<p>As últimas versões do Firefox e Chrome já implementaram as variáveis nativas do CSS. Se estiver utilizando algum desses navegadores, o exemplo abaixo ilustrará o funcionamento do CSS acima.</p>
<p><a class="jsbin-embed" href="http://jsbin.com/meboki/edit?html,output">JS Bin on jsbin.com</a><script src="http://static.jsbin.com/js/embed.min.js?3.35.12"></script></p>
<h2 id="manipulando-variaveis-css-com-javascript">Manipulando variáveis CSS com JavaScript <a class="title-anchor" href="#manipulando-variaveis-css-com-javascript" aria-hidden="true">¶</a></h2>
<p>Outra informação valiosa sobre as variáveis do CSS é a possibilidade de acessá-las e alterá-las via JavaScript, usando a interface <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration"><code>CSSStyleDeclaration</code></a> para interagir com propriedades.</p>
<h3 id="exemplo-3">Exemplo <a class="title-anchor" href="#exemplo-3" aria-hidden="true">¶</a></h3>
<p>Considerando:</p>
<pre><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">--my-color</span><span class="token punctuation">:</span> darkcyan<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--my-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Você pode obter o valor da propriedade <code>--my-color</code>, através do <code>window.getComputedStyle()</code> e <code>getPropertyValue()</code>.</p>
<pre><code class="language-js"><span class="token keyword">const</span> myColor <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">'--my-color'</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myColor<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => darkcyan</span>
</code></pre>
<p>Você pode alterar o valor da variável, através do <code>setProperty()</code> do <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style">objeto <code>style</code></a>:</p>
<pre><code class="language-js">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">'--my-color'</span><span class="token punctuation">,</span> <span class="token string">'tomato'</span><span class="token punctuation">)</span>
</code></pre>
<div class="note">
<p>Conheça o <code>CSSStyleDeclaration</code> abrindo o DevTools e digitando <code>getComputedStyle(document.body)</code> no console.</p>
</div>
<h2 id="curiosidades">Curiosidades <a class="title-anchor" href="#curiosidades" aria-hidden="true">¶</a></h2>
<ul>
<li>Você não pode armazenar nomes de propriedades do CSS como <em>Custom Properties</em>.</li>
</ul>
<pre><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">--myProperty</span><span class="token punctuation">:</span> overflow<span class="token punctuation">;</span>
  <span class="token function">var</span><span class="token punctuation">(</span>--myProperty<span class="token punctuation">)</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Erro de sintaxe */</span>
<span class="token punctuation">}</span>
</code></pre>
<p>…Em compensação, você pode armazenar qualquer outra coisa (e usá-las com JavaScript!):</p>
<pre><code class="language-js"><span class="token operator">--</span>foo<span class="token punctuation">:</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre>
<ul>
<li>Você não pode formar valores com variáveis.</li>
</ul>
<pre><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">--myContainerWidth</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--myContainerWidth<span class="token punctuation">)</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Valor inválido */</span>
  <span class="token comment" spellcheck="true">/* => 300 px, em vez de 300px */</span>
<span class="token punctuation">}</span>
</code></pre>
<p>…Ao menos que você use <code>calc()</code>:</p>
<pre><code class="language-css">    <span class="token selector">div</span> <span class="token punctuation">{</span>
    <span class="token property">--myContainerWidth</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--myContainerWidth<span class="token punctuation">)</span> * 1px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* => width: 300px; */</span>
  <span class="token punctuation">}</span>
</code></pre>
<h2 id="consideracoes-finais">Considerações Finais <a class="title-anchor" href="#consideracoes-finais" aria-hidden="true">¶</a></h2>
<p>As <em>Custom Properties</em> abriram novas possibilidades para o uso de variáveis em folhas de estilo. Depois de diversas especificações e sintaxes (<a href="https://www.w3.org/TR/2013/WD-css-variables-1-20130620/#var-">nem sempre foi <code>--</code></a>, acredite!), elas estão finalmente em fase de implementação nos navegadores.</p>
<p>Tem interesse em se aprofundar em outras novas funcionalidades do CSS? Acompanhe a série <a href="/blog/o-css-do-futuro/">O CSS do Futuro</a>!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;http://caniuse.com/#feat=css-variables&quot;&gt;Suporte&lt;/a&gt; | &lt;a href=&quot;https://www.w3.org/TR/css-variables/&quot;&gt;
    
    </summary>
    
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
      <category term="css" scheme="https://diessi.ca/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>O CSS do Futuro</title>
    <link href="https://diessi.ca/blog/o-css-do-futuro/"/>
    <id>https://diessi.ca/blog/o-css-do-futuro/</id>
    <published>2016-05-30T02:21:51.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="summary">
<p>Já existem <a href="https://drafts.csswg.org/">especificações</a> garantindo funcionalidades incríveis para o CSS: variáveis; uma nova sintaxe para <em>media queries</em>; <em>nesting</em>; novos seletores, valores e propriedades. E você pode usá-las, <strong>hoje</strong>.</p>
</div>
<p>Neste artigo, introduzo uma série de artigos relacionados às principais funcionalidades do CSS do futuro, além da ferramenta <a href="http://cssnext.io/">CSSNext</a>, que permite que você as utilize sem esperar o suporte do navegador.</p>
<p>(A fins didáticos, é possível assemelhar o CSSNext ao <a href="https://babeljs.io/">Babel</a>, que, por sua vez, também permite desenvolver com o JavaScript do futuro ao transpilar o código JavaScript da próxima geração para um código suportado pelos navegadores atuais.)</p>
<p>Ao final desse artigo, você saberá como desenvolver, hoje, com o CSS do futuro.</p>
<hr>
<h2 id="introducao-ao-postcss">Introdução ao PostCSS <a class="title-anchor" href="#introducao-ao-postcss" aria-hidden="true">¶</a></h2>
<p>O CSSNext está relacionado com PostCSS. Mas o que é o PostCSS, afinal?</p>
<p>O <a href="https://github.com/postcss/postcss">PostCSS</a> é apenas uma ferramenta que permite (pré ou pós) processar o CSS através de plugins em JavaScript. Um desses plugins é o CSSNext – assim como, por exemplo, o <a href="https://github.com/postcss/autoprefixer">Autoprefixer</a>, que trabalha na etapa de pós-processamento do CSS, adicionando <em>vendor prefixes</em>.</p>
<p>A transformação de estilos é viabilizada de forma integralmente <strong>agnóstica</strong>: nada é dito sobre como e com o que será feito. Com o PostCSS, você é responsável pelo workflow de processamento do estilo. É possível utilizar <a href="https://github.com/jonathantneal/precss">funcionalidades pré-processadas</a> e/ou <a href="https://github.com/postcss/sugarss">sintaxe do Sass</a>, <a href="https://github.com/ben-eb/cssnano">minificar</a> e adicionar <em>vendor prefixes</em> – tudo de forma “plugável”!</p>
<p>Como o PostCSS nunca é utilizado sozinho, o próximo passo é plugar o CSSNext a ele.</p>
<h2 id="como-usar-o-cssnext">Como usar o CSSNext <a class="title-anchor" href="#como-usar-o-cssnext" aria-hidden="true">¶</a></h2>
<p>Se você quiser apenas testar as funcionalidades dos novos módulos do CSS, você pode <a href="http://cssnext.io/playground">brincar com o CSSNext no navegador</a>.</p>
<h3 id="no-workflow">No workflow <a class="title-anchor" href="#no-workflow" aria-hidden="true">¶</a></h3>
<p>Em um ambiente de desenvolvimento, é necessário usá-lo com o PostCSS. A <a href="http://cssnext.io/setup/#usage">documentação do CSSNext</a> guia você para configurá-lo em seu workflow, seja com Webpack, Browserify, Gulp, Grunt, […], ou interface de linha de comando.</p>
<p>Em todos os casos, a configuração se resume a passar um <em>array</em> com os processadores desejados para o PostCSS. Nesse caso, o processador a ser plugado é apenas o <a href="https://www.npmjs.com/package/postcss-cssnext">postcss-cssnext</a>:</p>
<pre><code class="language-sh">$ npm install postcss-cssnext --save-dev
</code></pre>
<h2 id="principais-funcionalidades">Principais Funcionalidades <a class="title-anchor" href="#principais-funcionalidades" aria-hidden="true">¶</a></h2>
<p>Aprofunde-se nas principais funcionalidades do CSS do Futuro através dos artigos abaixo. Abra o <a href="http://cssnext.io/playground/">playground do CSSNext</a> e bons estudos!</p>
<ul>
<li><a href="/blog/a-cascata-das-variaveis-do-css/">A Cascata das Variáveis do CSS</a></li>
<li>Uma Nova Sintaxe Para Media Queries</li>
<li>Seletores CSS em Um Novo Nível</li>
<li>Manipulando Cores Com CSS</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;summary&quot;&gt;
&lt;p&gt;Já existem &lt;a href=&quot;https://drafts.csswg.org/&quot;&gt;especificações&lt;/a&gt; garantindo funcionalidades incríveis para o CSS: 
    
    </summary>
    
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
      <category term="css" scheme="https://diessi.ca/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Mass Deleting Files from Slack</title>
    <link href="https://diessi.ca/blog/mass-deleting-files-from-slack/"/>
    <id>https://diessi.ca/blog/mass-deleting-files-from-slack/</id>
    <published>2016-04-17T03:10:15.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Slack comes with limited file storage, so you eventually run out of space. Deleting files isn’t easy though: there is no way to <strong>bulk delete</strong> them using the web interface.</p>
<blockquote>
<p>Slack forces you to delete one by one.</p>
</blockquote>
<p>And although Slack can force humans, it can’t force JavaScript. So JavaScript to the rescue!</p>
<h2 id="how-to-delete-multiple-files-from-slack">How to delete multiple files from Slack <a class="title-anchor" href="#how-to-delete-multiple-files-from-slack" aria-hidden="true">¶</a></h2>
<p>In order to free up space, you’ll need;</p>
<ul>
<li><a href="https://nodejs.org/">Node.js</a> version 5 or later;</li>
<li>A Slack token, which you can get from <a href="https://api.slack.com/docs/oauth-test-tokens">Slack API docs</a>;</li>
<li>A terminal.</li>
</ul>
<h3 id="installing">Installing <a class="title-anchor" href="#installing" aria-hidden="true">¶</a></h3>
<p>Open your terminal and install <code>slack-delete-files</code> package globally using Node Package Manager:</p>
<pre><code class="language-sh">$ npm install -g slack-delete-files
</code></pre>
<h3 id="running">Running <a class="title-anchor" href="#running" aria-hidden="true">¶</a></h3>
<pre><code class="language-sh">$ slack-delete-files
</code></pre>
<div class="note">
<p>You’ll be asked for your Slack token and whether you want to delete <em>all files</em> or only <em>files older than 30 days</em>.</p>
</div>
<h3 id="done">Done! <a class="title-anchor" href="#done" aria-hidden="true">¶</a></h3>
<p>Your space is probably back!</p>
<p>After deleting, you can uninstall the package:</p>
<pre><code class="language-sh">$ npm uninstall -g slack-delete-files
</code></pre>
<p><a href="https://github.com/diessica/slack-delete-files">Contribute on GitHub</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Slack comes with limited file storage, so you eventually run out of space. Deleting files isn’t easy though: there is no way to &lt;strong&gt;b
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A Fantástica Diversidade do Front-end</title>
    <link href="https://diessi.ca/blog/a-fantastica-diversidade-do-front-end/"/>
    <id>https://diessi.ca/blog/a-fantastica-diversidade-do-front-end/</id>
    <published>2016-04-09T18:10:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p class="summary">Os diferentes perfis de desenvolvedores front-end é um tópico que frequente em fóruns de discussão. Quais perfis o mercado  espera? Como posso me definir enquanto desenvolvedor(a) front-end?</p>
<p>Vi, recentemente, uma <a href="https://www.facebook.com/careers/jobs/a0I1200000IALJQ/">vaga no Facebook para Front-end Engineer com foco em Acessibilidade</a>. Pensei “Foco em acessibilidade? Que específico!”, e, segundos depois, todas as discussões que já tive sobre os perfis de desenvolvedores front-end me vieram à mente.</p>
<p>Falar sobre esse assunto é falar sobre <strong>como interpretar vagas de emprego sem entrar em desespero</strong>.</p>
<h2 id="mesmo-papel-diversas-habilidades">Mesmo Papel, Diversas Habilidades <a class="title-anchor" href="#mesmo-papel-diversas-habilidades" aria-hidden="true">¶</a></h2>
<p>Estuda Motion Design a fim de desenvolver não só sites, mas experiências fantásticas? Estuda UX Design e práticas de Acessibilidade a fim de desenvolver produtos que engajam o máximo de pessoas possível? Estuda padrões de arquitetura de software a fim de desenvolver aplicações web complexas e escaláveis no client-side?</p>
<p>Você pode estudar e gostar todos; estudar mais um mais do que o outro; trabalhar com um, mas tender a outro; e pode até mesmo não focar em nenhum dos que eu citei acima. Em qualquer uma das possibilidades, você provavelmente <strong>não deixará de ser um profissional da área de front-end</strong> – mas terá, com certeza, um mercado específico e uma carreira que se basearão nas suas escolhas profissionais.</p>
<blockquote>
<p>Existe uma diversidade incrível de habilidades na área de desenvolvimento front-end.</p>
</blockquote>
<p><strong>Somos o intermediário entre o back-end e o design</strong>, mas nosso papel é transformar o web design em uma experiência real. Essa (grande) responsabilidade faz com que desenvolvamos diversas habilidades, e algumas são inegavelmente desenvolvidas em maior ou menor nível. Nesse desnível, encontramos de <em>Motion Designers</em> a <em>JavaScript Developers</em>, cada um com seu espaço em times e projetos específicos.</p>
<p>E não há nada de errado nisso. O surgimento dessas especializações – que podem (e devem) ser escolhidas por você – é apenas um resultado da complexidade atual do desenvolvimento front-end.</p>
<h2 id="confie-nas-suas-habilidades">Confie nas Suas Habilidades <a class="title-anchor" href="#confie-nas-suas-habilidades" aria-hidden="true">¶</a></h2>
<p>(ou “Você Não Precisa Ser o Candidato Perfeito Para Todas as Vagas de Front-end Existentes”.)</p>
<p>Por que eu disse que <em>falar sobre esse assunto é falar sobre como interpretar vagas de emprego sem entrar em desespero</em>?</p>
<p>Pense: Você é experiente, estuda com frequência, mas, ocasionalmente, procura vagas de emprego e se vê insuficiente. Ok, convenhamos, a possibilidade existe: você não estar atingindo os requisitos mínimos das vagas pode sim ser um sinal de que algo está errado. Mas provavelmente não é o caso.</p>
<p><strong>Talvez você esteja procurando vagas para um perfil que não é o seu.</strong> Não precisamos aceitar ter expertises variadas como é exigido; afinal, muitas vagas na área de TI viram piada justamente por esse motivo. Desde que você entenda a multidisciplinaridade como mais valiosa que qualquer disciplina, apenas abrace o que prefere e se aprofunde, torne-se uma referência nisso.</p>
<p>No fim, suas preferências moldarão você como profissional. Elas farão com que você seja incluído(a) ou excluído(a) de várias oportunidades, o que, por consequência, moldará sua carreira.</p>
<p>Estude o que gosta, reconheça suas preferências, confie nas suas habilidades, e, então, procure vagas sem entrar em desespero.</p>
<h2 id="perfis-de-desenvolvedores-front-end">Perfis de Desenvolvedores Front-end <a class="title-anchor" href="#perfis-de-desenvolvedores-front-end" aria-hidden="true">¶</a></h2>
<p>No <a href="https://github.com/frontendbr/forum/issues/32">fórum do Front-end Brasil</a>, foi proposta a divisão de separar profissionais de front-end que desenvolvem a camada de apresentação dos que arquitetam aplicações que interagem com back-end. Concordo com a divisão. Tenho uma visão bem definida, com base nas exigências atuais do mercado internacional.</p>
<h3 id="dois-perfis-uma-proposta">Dois Perfis: Uma Proposta <a class="title-anchor" href="#dois-perfis-uma-proposta" aria-hidden="true">¶</a></h3>
<h4 id="front-end-developer">Front-end Developer <a class="title-anchor" href="#front-end-developer" aria-hidden="true">¶</a></h4>
<p>A ponte entre o design e o front-end. (“UI Developer” é um nome alternativo.)</p>
<h5 id="habilidades">Habilidades <a class="title-anchor" href="#habilidades" aria-hidden="true">¶</a></h5>
<ul>
<li>Proficiência em HTML semântico, CSS e JavaScript a nível de desenvolvimento da camada de apresentação da aplicação.</li>
<li>Princípios e boas práticas de User Experience Design.</li>
<li>Princípios e boas práticas de Acessibilidade.</li>
<li>Proficiência em metodologias de organização do CSS como OOCSS, SMACSS e BEM.</li>
<li>Noções de User Interface Design.</li>
<li>Noções de Motion Design.</li>
<li>Noções de back-end, geralmente a nível de integração com CMS.</li>
</ul>
<h5 id="responsabilidades">Responsabilidades <a class="title-anchor" href="#responsabilidades" aria-hidden="true">¶</a></h5>
<ul>
<li>Planejamento e desenvolvimento da camada de apresentação da aplicação.</li>
<li>Implementação do <em>live styleguide</em>, junto ao designer.</li>
<li>Metodologia e estrutura a ser usada no CSS.</li>
<li>Participação no processo de Design (pois <a href="http://bradfrost.com/blog/post/development-is-design/"><em>Development is Design</em></a>).</li>
</ul>
<h4 id="front-end-engineer">Front-end Engineer <a class="title-anchor" href="#front-end-engineer" aria-hidden="true">¶</a></h4>
<p>A ponte entre o front-end e o back-end. (Dependendo do projeto, “JavaScript Developer” pode ser mais apropriado.)</p>
<h5 id="habilidades-2">Habilidades <a class="title-anchor" href="#habilidades-2" aria-hidden="true">¶</a></h5>
<ul>
<li>Proficiência em HTML e CSS, mas sua especialização é JavaScript.</li>
<li>Proficiência em Design Patterns e padrões de arquitetura de software.</li>
<li>Conhecimento de modelo cliente-servidor, HTTP, REST.</li>
<li>Princípios e boas práticas de Performance.</li>
<li>Princípios e boas práticas de Segurança.</li>
<li>Noções de estratégias de desenvolvimento, como Integração Contínua (CI).</li>
</ul>
<h5 id="responsabilidades-2">Responsabilidades <a class="title-anchor" href="#responsabilidades-2" aria-hidden="true">¶</a></h5>
<ul>
<li>Planejamento e desenvolvimento da aplicação JavaScript.</li>
<li>Automatização das tarefas.</li>
<li><em>Tooling</em> da aplicação.</li>
<li>Implementação de uma metodologia de testes.</li>
</ul>
<div class="note">
<p>Não concordo com o nome “Front-end Designer”, <a href="http://bradfrost.com/blog/post/frontend-design/">sugerido pelo Brad Frost</a>. Ainda que desenvolvedores front-end participem do processo de design, tornar funcional a camada de apresentação é uma etapa do desenvolvimento de software – não do design. O fato do desenvolvimento front-end ser erroneamente considerado mais programação do que design, quando deveria ser os dois, é um argumento que não justifica o nome.</p>
</div>
<h3 id="qual-deles">…Qual Deles? <a class="title-anchor" href="#qual-deles" aria-hidden="true">¶</a></h3>
<p>Normalmente temos um pouco dos dois, mas sempre um mais do que o outro. Nesse caso, uma boa maneira de explicitar o seu papel sem desmerecer o outro é falar sobre suas habilidades, em vez de se apegar a um rótulo.</p>
<blockquote>
<p>Dificilmente um rótulo resumirá todo o seu conhecimento.</p>
</blockquote>
<p>Eu não me apego a isso, por exemplo. Mesmo exercendo a função de Front-end Engineer atualmente, continuo me denominando “Front-end Developer”.</p>
<h2 id="a-vaga-ideal-para-suas-habilidades">A Vaga Ideal Para Suas Habilidades <a class="title-anchor" href="#a-vaga-ideal-para-suas-habilidades" aria-hidden="true">¶</a></h2>
<p>É utópico esperar que todos desenvolvedores front-end sejam bons UX Designers, Motion Designers, JavaScript Developers… Isso não existe.</p>
<blockquote>
<p>As empresas procuram diferentes perfis de desenvolvedores front-end. <strong>E elas nem sempre sabem disso.</strong></p>
</blockquote>
<p>As empresas não simplesmente procuram um Front-end Developer ou um Front-end Engineer. Existem vagas bastante híbridas, como Front-end Engineers <em>com foco</em> em UX ou Acessibilidade, ou até mesmo Front-end Developers <em>com noções</em> de arquiteturas como MVC. Plenamente possível e válido!</p>
<p>Cabe a você identificar se é ideal à vaga de emprego que quer se candidatar e se suas habilidades são compatíveis com a expectativa da empresa. À empresa, cabe a identificação do seu perfil, a fim de alocar você em um projeto e time que explorem suas habilidades.</p>
<p>É o cenário perfeito, pelo menos.</p>
<h2 id="lembre-se-da-nossa-essencia">Lembre-se da Nossa Essência <a class="title-anchor" href="#lembre-se-da-nossa-essencia" aria-hidden="true">¶</a></h2>
<p>Independente de como você se posiciona e rotula, dos projetos que trabalha e do caminho que quer seguir, o front-end não deixará de orbitar ao redor da trinca <strong>HTML, CSS</strong> e <strong>JavaScript</strong>.</p>
<p>Enquanto você possuir interesse nessas três linguagens, os seus outros interesses apenas moldarão o seu caminho profissional.</p>
<p>E, temos sorte: na área de front-end, a diversidade de caminhos é fantástica.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;summary&quot;&gt;Os diferentes perfis de desenvolvedores front-end é um tópico que frequente em fóruns de discussão. Quais perfis o mercad
    
    </summary>
    
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
      <category term="work" scheme="https://diessi.ca/blog/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>5 Bibliotecas Essenciais para Desenvolver React Apps</title>
    <link href="https://diessi.ca/blog/5-bibliotecas-essenciais-para-desenvolver-react-apps/"/>
    <id>https://diessi.ca/blog/5-bibliotecas-essenciais-para-desenvolver-react-apps/</id>
    <published>2016-03-22T02:00:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>O conjunto de ferramentas, boilerplates e bibliotecas disponíveis formam um ecossistema incrível em torno do React.</p>
<p>No meio de tudo, existem ferramentas que são comuns – e essenciais – a diversas aplicações, independente de suas arquiteturas. Cito cinco delas.</p>
<h2 id="1-classnames">1. <a href="https://www.npmjs.com/package/classnames">classnames</a> <a class="title-anchor" href="#1-classnames" aria-hidden="true">¶</a></h2>
<p>Muitas vezes, no React, um estado representará um comportamento visual do componente (“selecionado”, “pressionado”, “focado”), normalmente associado a uma classe CSS.</p>
<p>Um botão e seus estados <em>disabled</em> e <em>hovered</em>, por exemplo,  ficariam assim:</p>
<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span>
  <span class="token attr-name">onMouseOver</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span>
  <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">classNames</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>className<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string">'button--disabled'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isDisabled<span class="token punctuation">,</span>
    <span class="token string">'button--hovered'</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isHovered
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="token punctuation">/></span></span>
</code></pre>
<p>Perceba que o Classnames facilita a manipulação condicional de classes com React, removendo vários blocos de <code>if</code>/<code>else</code> do seu código.</p>
<h2 id="2-react-router">2. <a href="https://www.npmjs.com/package/react-router">react-router</a> <a class="title-anchor" href="#2-react-router" aria-hidden="true">¶</a></h2>
<p>Se você está desenvolvendo uma <em>Single-page Application</em>, você precisará sincronizar a interface do usuário com a URL.</p>
<p>O React Router é a melhor solução de rotas para aplicações desenvolvidas com React, e isso se deve bastante a sua API declarativa e pensada para componentes.</p>
<p>Considere a seguinte configuração de rotas:</p>
<pre><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> browserHistory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router'</span>

<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'components/App'</span>
<span class="token keyword">import</span> Homepage <span class="token keyword">from</span> <span class="token string">'screens/Homepage'</span>
<span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'screens/About'</span>
<span class="token keyword">import</span> Contact <span class="token keyword">from</span> <span class="token string">'screens/Contact'</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span> <span class="token attr-name">history</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>browserHistory<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>App<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IndexRoute</span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Homepage<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span><span class="token punctuation">/></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>contact<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Contact<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Route</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'react-root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p>Perceba que há uma instância inicial da rota e outras rotas aninhadas, formando uma hierarquia. Essa hierarquia é a essência do React Router.</p>
<p>Considere que temos um App (<code>App.js</code>):</p>
<pre><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> IndexLink<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router'</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>IndexLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Homepage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/contact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App
</code></pre>
<div class="note">
<p><strong>Dica</strong>: O componente acima não tem um estado próprio, portanto, ele é um <em>Pure Component</em> (ou <em>Dumb Component</em>). Componentes sob estas condições podem – e devem – ser transformados em <em>Stateless Functional Components</em>. <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
</div>
<p>Uma explicação rápida: Todas as subrotas da rota do componente <code>App</code> (os <code>&lt;Route&gt;</code> dentro de <code>&lt;Route&gt;</code>) terão seus componentes transferidos como props para o componente <code>App</code> (e por isso o <code>this.props.children</code>) ao entrar na rota através do <code>&lt;Link&gt;</code>.</p>
<p>A <a href="https://github.com/reactjs/react-router/tree/1.0.x/docs">documentação do React Router</a> dispensa quaisquer outras explicações!</p>
<h2 id="3-react-helmet">3. <a href="https://www.npmjs.com/package/react-helmet">react-helmet</a> <a class="title-anchor" href="#3-react-helmet" aria-hidden="true">¶</a></h2>
<p>Dificilmente você usará o React Router sem o Helmet. O Helmet te dá, no próprio componente, o controle do <code>head</code> do documento.</p>
<p>Um caso de uso simples é alterar o título do documento, útil quando a aplicação entra em uma nova rota:</p>
<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Helmet</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Carrinho</span> <span class="token attr-name">de</span> <span class="token attr-name">Compras"</span> <span class="token punctuation">/></span></span>
</code></pre>
<h2 id="4-jsx-control-statements">4. <a href="https://www.npmjs.com/package/jsx-control-statements">jsx-control-statements</a> <a class="title-anchor" href="#4-jsx-control-statements" aria-hidden="true">¶</a></h2>
<p>JSX facilita a escrita da marcação do componente e torna seu código mais fácil de ler e entender. Mas e quando a renderização do componente é condicional? E quando renderizamos componentes dinamicamente?</p>
<p>Seu código termina provavelmente assim:</p>
<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">{</span>todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>todo<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoItem</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>E assim:</p>
<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token punctuation">{</span>condition <span class="token operator">&amp;&amp;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token punctuation">}</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>Ou de uma das várias outras formas: condicionais inline, operações ternárias, funções para renderizar componentes condicionalmente… Práticas que, em grande escala, podem prejudicar a legibilidade do código. E é na <strong>legibilidade</strong> que o jsx-control-statements vence.</p>
<p>O primeiro exemplo, por exemplo, ficaria assim:</p>
<pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>For</span> <span class="token attr-name">each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todo<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">of</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>todos<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TodoItem</span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>For</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="5-axios-ou-fetch-api">5. <a href="https://www.npmjs.com/package/axios">axios</a> ou Fetch API <a class="title-anchor" href="#5-axios-ou-fetch-api" aria-hidden="true">¶</a></h2>
<p>Não é uma dependência apenas de aplicações React, mas você provavelmente vai precisar de um cliente HTTP. (<strong>Um cliente HTTP de gente adulta</strong>, que não é o <code>$.ajax</code>.) Existem duas ótimas opções: <a href="https://www.npmjs.com/package/axios">axios</a> e o fetch (“<a href="https://fetch.spec.whatwg.org/">WHATWG Fetch API</a>”).</p>
<h3 id="axios">axios <a class="title-anchor" href="#axios" aria-hidden="true">¶</a></h3>
<p>Uma biblioteca maravilhosa.</p>
<p>A API do axios é completa: têm interceptadores de requisição, múltiplas requisições em paralelo… E suas requisições retornam lindas promises.</p>
<p>Fazendo uma requisição <code>POST</code>:</p>
<pre><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>

axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>
  <span class="token string">'/api/pets'</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Bard'</span><span class="token punctuation">,</span> cat<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> headers<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'X-Custom-Header'</span><span class="token punctuation">:</span> <span class="token string">'foobar'</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pet salvo com sucesso!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="fetch-api">Fetch API <a class="title-anchor" href="#fetch-api" aria-hidden="true">¶</a></h3>
<p>O fetch, por outro lado, já é um <em><a href="https://fetch.spec.whatwg.org/">living standard</a></em>, e, nesse momento, tem suporte básico nos navegadores Firefox, Chrome e Opera. É recomendado, no entanto, o uso de um <a href="https://www.npmjs.com/package/isomorphic-fetch">polyfill</a>, por ser uma tecnologia ainda experimental.</p>
<p>A mesma requisição <code>POST</code> ficaria assim:</p>
<pre><code class="language-js"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/api/pets'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>
  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'X-Custom-Header'</span><span class="token punctuation">:</span> <span class="token string">'foobar'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  body<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Bard'</span><span class="token punctuation">,</span> cat<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pet salvo com sucesso!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<div class="note">
<p>Você pode saber mais sobre o Fetch API no <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Mozilla Developer Network</a>.</p>
</div>
<hr>
<h2 id="consideracoes">Considerações <a class="title-anchor" href="#consideracoes" aria-hidden="true">¶</a></h2>
<p>Embora eu tenha citado apenas cinco, existem diversas bibliotecas e componentes que descomplicam o processo de desenvolvimento de uma aplicação com React. Sem dúvidas, é um dos ecossistemas mais relevantes que front-end já teve.</p>
<p>Destaco que não cobri um tópico que, quando se trata de React, é bastante pertinente: formulários. <strong>Lidar com formulários no React é complicado.</strong> Nesse primeiro momento, resolvi deixar o tema de lado para não fugir da proposta do artigo.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Sugiro a leitura de <a href="https://medium.com/@joshblack/stateless-components-in-react-0-14-f9798f8b992d">Functional Stateless Components in React 0.14</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;O conjunto de ferramentas, boilerplates e bibliotecas disponíveis formam um ecossistema incrível em torno do React.&lt;/p&gt;
&lt;p&gt;No meio de tud
    
    </summary>
    
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
      <category term="react" scheme="https://diessi.ca/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Lessons from the Last Years</title>
    <link href="https://diessi.ca/blog/lessons-from-the-last-years/"/>
    <id>https://diessi.ca/blog/lessons-from-the-last-years/</id>
    <published>2016-02-07T03:17:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve made a point of being in challenging situations whenever possible.</p>
<p>In the last years, most of them were challenging in a social and career perspective. Both my personal and professional life benefited from that decision: I got to learn a lot about people, relationships, business, productivity and, last but not least, myself.</p>
<p>Thankfully, I’m not selfish enough to not to share some lessons I’ve learned.</p>
<p>I hope you benefit from them too.</p>
<hr>
<ol>
<li>Be kind to people.</li>
<li>Be kind to yourself. It means, rather than comparing yourself to others, respect your journey and understand you’ve had different circumstances and opportunities.</li>
<li>Save money every month, even if it’s a little. Don’t wait for an emergency or a special event.</li>
<li>Authority doesn’t actually mean anything. Kindness does. (If you ever run a business, don’t ever let it get out of your mind.)</li>
<li>When it comes to a serious question, asking it by texting will make you miss a lot of answers.</li>
<li>Have your goals in mind rather writing them down. When it comes to productivity, writing down a planning for reaching a goal works better.</li>
<li>Growing up takes courage.</li>
<li>Hate is a waste of time. Social networks too. You cannot get rid of them, so just make sure they both aren’t taking over the person you are.</li>
<li>There are always deadlines. Try not to let them be a pressure in your life.</li>
<li>If you get to ask yourself <em>“What if I screw up and make the wrong call?”</em>, remember that probably the situation you’re dealing with isn’t a brain surgery. It doesn’t have to – and probably won’t – be thoroughly perfect.</li>
<li>Getting simple things done everyday can get you motivated to do the great ones.</li>
<li><strong>Words are powerful</strong>. Choose them carefully.</li>
<li>Practicing empathy everyday increases your perspective on society.</li>
<li>Sometimes you’re wrong – and there’s nothing wrong about that.</li>
<li>Having communication skills doesn’t mean you are socially mature.</li>
<li>There will be moments you’ll have to say sorry. Don’t miss them.</li>
<li>Give something back.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’ve made a point of being in challenging situations whenever possible.&lt;/p&gt;
&lt;p&gt;In the last years, most of them were challenging in a soci
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>Twelfth Floor</title>
    <link href="https://diessi.ca/blog/twelfth-floor/"/>
    <id>https://diessi.ca/blog/twelfth-floor/</id>
    <published>2016-02-02T15:37:52.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Do you know when a window view is urban?</p>
<p>When your look through the window and everything you see are other windows. A lot of them.</p>
<hr>
<p>The view out of my window has changed suddenly. January has left me with a grey view: old buildings, almost no houses, occasional trees, brands fighting a psychological warfare, and people unable to go out their apartaments without synthetic emotions.</p>
<p>It’s a typical urban scenario. For people who’ve got amazing powers of observation<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> through the years, it’s empty and meaningful at the same time.</p>
<blockquote>
<p>There are a lot of windows to look at and be curious about.</p>
</blockquote>
<p>The sky is still there, though, playing the non-urban role in my life, whatever the window view is.</p>
<figure><picture><source media="(min-width: 63.125rem)" srcset="../../media/2016/twelfth-floor.jpg"><source media="(min-width: 45rem)" srcset="../../media/2016/twelfth-floor_medium.jpg" ><source media="(max-width: 45rem)" srcset="../../media/2016/twelfth-floor_small.jpg"><img srcset="../../media/2016/twelfth-floor.jpg" alt="Moinhos de Vento Park, Porto Alegre"></picture>
<figcaption>The non-urban part of the twelfth floor. On 1st February, 20:33.</figcaption></figure>
<p>I’m sure there are curious things to think about when you live – but they all look more curious when you live in the twelfth floor.</p>
<p>Can’t you see? The urban view is a playground for overthinkers.</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>From Pink Floyd’s Nobody Home song. <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Do you know when a window view is urban?&lt;/p&gt;
&lt;p&gt;When your look through the window and everything you see are other windows. A lot of them
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>Ninguém Sabe Pouco o Suficiente</title>
    <link href="https://diessi.ca/blog/ninguem-sabe-pouco-o-suficiente/"/>
    <id>https://diessi.ca/blog/ninguem-sabe-pouco-o-suficiente/</id>
    <published>2015-12-25T13:27:48.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Quando você se vê envelhecendo, talvez seja desmotivador olhar para uma pessoa mais nova fazendo o que, na sua idade, sequer passava pela sua cabeça. <em>Afinal, quando ela chegar a sua idade atual, obviamente se tornará mais sábia do que você foi, considerando o que já era tão nova.</em></p>
<hr>
<p>Esse pensamento não representa a realidade.</p>
<p>Quando se compara, é feita uma avaliação tendenciosa com base no <strong>conhecimento que gostaríamos de ter</strong>, e não no conhecimento em si.</p>
<p>É um erro que cometemos ao enxergar o conhecimento sob uma ótica de unidade. Quando se acredita que o conhecimento é medido linearmente, os critérios se tornam pouco holísticos – e o resultado raramente é motivador.</p>
<p>Sua colega pode complementar seus pensamentos sobre acessibilidade na web. Seu colega que não manja de UX tem dicas de como melhorar a performance da aplicação.</p>
<blockquote>
<p>Ninguém sabe pouco o suficiente para ser irrelevante.</p>
</blockquote>
<p>E, a não ser que você seja iniciante na sua área, você não sabe <strong>menos</strong> do que eles. Nem <strong>mais</strong>.</p>
<figure><picture><img class="normal-img" src="../../media/2015/knowledge-diagram.png" srcset="../../media/2015/knowledge-diagram_2x.png 2x" alt="Diagrama representando conhecimento como ele realmente é"></picture>
<figcaption>A realidade, muito provavelmente. (<a href="https://twitter.com/aliciatweet/status/588009521936728065">Diagrama original</a>)</figcaption></figure>
<p>Respeite as vivências e habilidades suas e de outras pessoas.</p>
<p>Aí, encontramos o melhor delas e de nós.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Quando você se vê envelhecendo, talvez seja desmotivador olhar para uma pessoa mais nova fazendo o que, na sua idade, sequer passava pela
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
  </entry>
  
  <entry>
    <title>O Til no JavaScript</title>
    <link href="https://diessi.ca/blog/o-til-no-javascript/"/>
    <id>https://diessi.ca/blog/o-til-no-javascript/</id>
    <published>2015-11-01T01:48:29.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="summary">
<p>Incompreendido, o operador til (<code>~</code>) é um mistério que ninguém discute. Primeiro, pois é um operador bitwise, e, segundo, pois seus casos de uso são bastante misteriosos…</p>
</div>
<h2 id="voce-consegue-dizer">Você consegue dizer… <a class="title-anchor" href="#voce-consegue-dizer" aria-hidden="true">¶</a></h2>
<p>em <strong>valor</strong> e <strong>tipo de dado</strong>, o que será impresso no console nas situações abaixo?</p>
<pre><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token string">"1"</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">8.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token boolean">false</span><span class="token punctuation">)</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token string">"5.9"</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string">"Tudo bem?"</span><span class="token punctuation">)</span>   
</code></pre>
<p>Não sabe? <em>Well…</em></p>
<h2 id="o-operador-til">O operador til <a class="title-anchor" href="#o-operador-til" aria-hidden="true">¶</a></h2>
<p>Ou melhor, o operador <em>bitwise NOT</em>.</p>
<p>É importante falar isso pois é importante entender o que <em>bitwise</em> significa. Operadores bitwise são especiais em JavaScript: eles tratam todos seus operandos como uma sequência de 32 bits (0 e 1) – ou seja, trabalham com <strong>representações binárias</strong> (não decimais, como de praxe) de nossos operandos, e nos entregam valores númericos como se nada tivesse acontecido.</p>
<p>O <em>NOT</em> significa que todos os bits do operando serão invertidos (0 vira 1, 1 vira 0). Parece inútil quando não estamos trabalhando com números binários, mas as aplicações criativas tornam o operador mais interessante.</p>
<h3 id="regras-do">Regras do <code>~</code> <a class="title-anchor" href="#regras-do" aria-hidden="true">¶</a></h3>
<ol>
<li>Quando a expressão é <code>null</code> ou <code>undefined</code>… 0.</li>
<li>Objetos são convertidos para strings.</li>
<li>Strings são convertidas para números, se possível. Quando não é possível… 0.</li>
<li>Valores booleanos são tratados como números (0 para <code>false</code>, 1 para <code>true</code>).</li>
<li><em>Floating-points</em> são convertidos excluindo a parte fracionada.</li>
<li>Todo número inteiro <em>n</em> é convertido para -(n + 1).</li>
</ol>
<p>As duas últimas regras são as mais importantes, pois elas implicam nas principais aplicações do operador. Já temos a resposta de alguns:</p>
<pre><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">8.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => -9</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => -1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string">"Tudo bem?"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => -1</span>
</code></pre>
<div class="note">
<p>Os números foram convertidos de acordo com a fórmula -(n + 1). -9 é resultado de - 8 - 1, por exemplo.</p>
</div>
<h3 id="dupla-negacao">Dupla negação <a class="title-anchor" href="#dupla-negacao" aria-hidden="true">¶</a></h3>
<p>Podemos usar dois operadores til (<em>double bitwise NOT</em>). Aqui, basta entender o trabalho do outro til: reinverter os bits.</p>
<p>Considerando <code>~n</code>, como anteriormente, temos -(n + 1) = <strong>- n - 1</strong>. Considerando <code>~~n</code>, temos -[-(n + 1)] = <strong>n + 1</strong>.</p>
<p>Perceba que as equações, quando somadas, se anulam. Pois essa é a grande sacada de usar dois operadores til! Temos, então:</p>
<pre><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token string">"5.9"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => -5</span>
</code></pre>
<h2 id="aplicacoes">Aplicações <a class="title-anchor" href="#aplicacoes" aria-hidden="true">¶</a></h2>
<h3 id="truncar-numeros">Truncar números <a class="title-anchor" href="#truncar-numeros" aria-hidden="true">¶</a></h3>
<p>Pelo fato do operador converter removendo a parte fracionada, utilizá-lo para truncar números de forma fácil é a aplicação mais comum:</p>
<pre><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token number">7.8926152</span>
<span class="token keyword">const</span> integer <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span>data

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 7</span>
</code></pre>
<div class="note">
<p>Embora o <code>~~</code> tenha sido, por muito tempo, usado no lugar de <code>Math.floor()</code>, o método mais parecido com ele que temos em JavaScript hoje é o <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc"><code>Math.trunc()</code></a> do ES2015.</p>
</div>
<h3 id="converter-string-para-numero">Converter string para número <a class="title-anchor" href="#converter-string-para-numero" aria-hidden="true">¶</a></h3>
<p>Uma aplicação simples que se baseia em uma das regras de funcionamento do til: converter strings para números sempre que possível; afinal, é com números que o operador trabalha.</p>
<pre><code class="language-js"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">"2"</span>
<span class="token keyword">const</span> dataAsNumber <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span>data

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataAsNumber<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => 2</span>
</code></pre>
<h3 id="verificar-a-existencia-de-um-item-no-array">Verificar a existência de um item no array <a class="title-anchor" href="#verificar-a-existencia-de-um-item-no-array" aria-hidden="true">¶</a></h3>
<pre><code class="language-js"><span class="token keyword">let</span> women <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Ada Lovelace'</span><span class="token punctuation">,</span> <span class="token string">'Joan of Arc'</span><span class="token punctuation">,</span> <span class="token string">'Marie Curie'</span><span class="token punctuation">]</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>women<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Ada Lovelace'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Ada Lovelace was such an important woman!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>É difícil de compreender humanamente que o <code>if</code> está verificando se Ada Lovelace está incluída no array <code>women</code>, mas é exatamente isso que está acontecendo. Você entendeu a razão pela qual isso funciona?</p>
<div class="note">
<p>Poderíamos verificar sem o <code>~</code>, mas não funcionaria em casos em que o item do array é o primeiro (índice zero, e 0 retorna <code>false</code> como booleano). O operador til viabiliza essa verificação, em razão da conversão de um número inteiro <em>n</em> para -(n + 1).</p>
</div>
<p>O equivalente humano, utilizando <a href="https://lodash.com/">Lodash</a> (<code>_</code>), seria:</p>
<pre><code class="language-js"><span class="token keyword">let</span> women <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Ada Lovelace'</span><span class="token punctuation">,</span> <span class="token string">'Joan of Arc'</span><span class="token punctuation">,</span> <span class="token string">'Marie Curie'</span><span class="token punctuation">]</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_</span><span class="token punctuation">(</span>women<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'Ada Lovelace'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Ada Lovelace was such an important woman!'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="performance">Performance <a class="title-anchor" href="#performance" aria-hidden="true">¶</a></h2>
<p>Usar <code>~~</code> em vez de <code>Math.floor</code> ou <code>Math.trunc</code> é geralmente mais rápido. Dependendo da <em>JavaScript engine</em> do navegador e do caso de uso, no entanto, pode não fazer muita diferença e até ser mais lento. Veja o <a href="http://jsperf.com/tilde-vs-floor">teste no JSPerf</a>.</p>
<p>De qualquer forma, a péssima performance de quem lê um código com o desumano <code>~</code> pode não valer o ganho de performance – que é ignorável de tão mínimo – em uma aplicação.</p>
<h2 id="consideracoes">Considerações <a class="title-anchor" href="#consideracoes" aria-hidden="true">¶</a></h2>
<p>No geral, operadores bitwise, principalmente <code>~</code>, <code>|</code> e <code>&amp;</code>, possuem aplicações interessantes e bastante criativas.</p>
<p>Quanto ao <code>~~</code>, não acredito que chegará a se popularizar como aconteceu com o <code>!!</code>, que converte para um valor booleano. Em anos, a prática com til nunca se tornou realmente popular, talvez pelo fato de ser um operador bitwise – e, portanto, pouco compreendido – e ter casos de uso bastante excêntricos.</p>
<p>Ficam à título de curiosidade suas aplicações bastante criativas. 😉</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;summary&quot;&gt;
&lt;p&gt;Incompreendido, o operador til (&lt;code&gt;~&lt;/code&gt;) é um mistério que ninguém discute. Primeiro, pois é um operador bit
    
    </summary>
    
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>O Que Há de Errado com a &quot;Cultura jQuery&quot;</title>
    <link href="https://diessi.ca/blog/o-que-ha-de-errado-com-a-cultura-jquery/"/>
    <id>https://diessi.ca/blog/o-que-ha-de-errado-com-a-cultura-jquery/</id>
    <published>2015-09-20T12:56:05.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="summary">
<p>Este não é um artigo sobre jQuery. Este é um artigo sobre ferramentas, sim, mas é, principalmente, um artigo sobre <strong>análise</strong> e o protagonismo do desenvolvedor front-end nesse processo.</p>
</div>
<h2 id="resumo">Resumo <a class="title-anchor" href="#resumo" aria-hidden="true">¶</a></h2>
<p><strong>Aplicações variam.</strong> Aprenda a definir a arquitetura da sua aplicação. Aprenda a reconhecer a necessidade de uma SPA (<em>Single Page Application</em>).</p>
<p>A “cultura jQuery” te afasta de tudo isso, e, portanto, distancia você do seu papel enquanto desenvolvedor front-end.</p>
<hr>
<h2 id="introducao">Introdução <a class="title-anchor" href="#introducao" aria-hidden="true">¶</a></h2>
<p>Se existe uma cultura nas agências digitais do Brasil que é unânime, é a cultura do jQuery. Não a cultura de utilizar todo o poder da biblioteca, no entanto, mas o hábito intrínseco de importar o <code>jqueryX.X.X.min.js</code> em todo projeto.</p>
<p>(Sim, em 2015.)</p>
<p>Sobre o que há de errado, serei sucinta, pois, para esse artigo, espero um público-alvo preguiçoso e acomodado.</p>
<h2 id="o-que-ha-de-errado">O que há de errado <a class="title-anchor" href="#o-que-ha-de-errado" aria-hidden="true">¶</a></h2>
<p>…em usar jQuery em 2015? O que há de errado em importar jQuery ao iniciar o meu projeto?</p>
<p>Analisando superficialmente, <strong>nada</strong>.</p>
<p>Mas isso tem dado brecha a uma zona de conforto profunda e, na minha experiência, com raízes difíceis de arrancar. Essa cultura se expande e transcende aquilo que lhe deu origem. Portanto, perceba:</p>
<blockquote>
<p>Este não é um artigo sobre jQuery.</p>
</blockquote>
<p>A comunidade de AngularJS é um exemplo de que isso não é sobre jQuery. Muitos migraram dele ao Angular sem abandonar a cultura. O resultado? Bem, muito tem sido dito sobre código Angular legado, que ninguém quer dar manutenção. A escolha errada já foi feita, e isso é demasiadamente penoso para a manutenção de uma aplicação complexa.</p>
<p>O fato é que a <strong>cultura não mudou.</strong> Ainda se adota biblioteca ou framework em escala sem pensar duas vezes.</p>
<h2 id="aprendendo-a-evitar">Aprendendo a evitar <a class="title-anchor" href="#aprendendo-a-evitar" aria-hidden="true">¶</a></h2>
<blockquote>
<p>Deve-se saber quando abranger uma visão holística do projeto, e quando separar responsabilidades.</p>
</blockquote>
<p>A separação de responsabilidades se daria pela análise dos requisitos da aplicação e dos desafios gerados, que trazem consigo o que chamo de “subproblemas” (<em>necessidades que surgem durante a análise do desafio</em>), que devem ser solucionados separadamente. A visão holística ajudaria a estruturar os componentes de forma consistente em um sistema, definindo uma arquitetura.</p>
<p>Falando de desenvolvimento front-end moderno (e, portanto, falando de front-end <strong>modular</strong> e de unidades encapsuladas e independentes, os componentes), essa separação de responsabilidades torna-se ainda mais fácil! Vejamos, abaixo, alguns  subproblemas que surgem durante a análise de requisitos, apenas para exemplificar o que quero dizer quando trato a decisão de ferramentas como uma solução para um subproblema.</p>
<div class="note">
<p>Os exemplos a seguir não explicam o front-end modular na prática. Adianto, no entanto, ferramentas como <a href="http://browserify.org/">Browserify</a> ou <a href="https://webpack.github.io/">Webpack</a>, que fazem parte do <em>tooling</em> necessário.</p>
</div>
<h3 id="1-resiquicoes-ajax">1. Resiquições Ajax <a class="title-anchor" href="#1-resiquicoes-ajax" aria-hidden="true">¶</a></h3>
<p><strong>Subproblema</strong>: escrever Ajax em JavaScript é pouco intuitivo, difícil de ler e escrever.</p>
<p><strong>Solução possível</strong>: encapsular, no componente um módulo como <a href="https://github.com/ded/reqwest">Reqwest</a> e <a href="https://github.com/jakutis/httpinvoke">httpinvoke</a>. Você pode, inclusive, utilizar <em>apenas</em> o Ajax do <a href="https://www.npmjs.com/package/jquery">jQuery</a> (e não o jQuery inteiro!).</p>
<h3 id="2-manipulacao-excessiva-do-dom">2. Manipulação excessiva do DOM <a class="title-anchor" href="#2-manipulacao-excessiva-do-dom" aria-hidden="true">¶</a></h3>
<p><strong>Subproblemas</strong>: manipular DOM com JavaScript pode ser bastante exaustivo. Também, manipular em um nível excessivo é extremamente custoso para a performance da aplicação.</p>
<p><strong>Solução possível</strong>: <a href="https://github.com/Matt-Esch/virtual-dom">Virtual DOM</a>, que está embutido em bibliotecas como <a href="https://facebook.github.io/react/">React</a> e <a href="https://lhorie.github.io/mithril/">Mithril</a>. Ou, se precisar mesmo do DOM, considere pacotes como <a href="https://github.com/ded/qwery">qwery</a> ou <a href="https://github.com/bevacqua/dominus">Dominus</a>, junto com <a href="https://www.npmjs.com/package/domready">domready</a>.</p>
<div class="note">
<p>E se precisássemos de Ajax no React, por exemplo? <a href="http://facebook.github.io/react/docs/tutorial.html#getting-started">Este mau  exemplo</a> na documentação do React importa o jQuery inteiro. Como você faria? 😉</p>
</div>
<h3 id="sobre-arquitetura">Sobre arquitetura <a class="title-anchor" href="#sobre-arquitetura" aria-hidden="true">¶</a></h3>
<p>Esse tópico deve ser tratado durante a visão holística do projeto, isso é, da aplicação enquanto sistema de componentes. O <strong>subproblema</strong> seria a necessidade de estrutura que uma aplicação requere.</p>
<p>Para isso, você não precisa usar aquilo que é tradicional (diretamente: <strong>você não precisa usar MVC</strong>). Existem outras implementações de arquiteturas que não a implementação feita pelo seu framework amado. Existem outras arquiteturas que não <em>Model-View-Controller</em>.</p>
<p>Basicamente? Tenha um conhecimento decente de arquiteturas front-end (sugiro abrir a mente com <a href="https://facebook.github.io/react/blog/2014/05/06/flux.html">Flux</a>, que já possui bastante materiais e implementações da arquitetura disponíveís), e não um conhecimento aprofundado de MVC.</p>
<h2 id="conclusao">Conclusão <a class="title-anchor" href="#conclusao" aria-hidden="true">¶</a></h2>
<p>Conheça o projeto e saiba como analisar seus requisitos. O resultado deve ser uma descrição explícita da sua aplicação, com subproblemas já reconhecidos e, então, soluções possíveis, todas envolvidas por uma solução possível maior, que é a da arquitetura (definida durante a análise holística). Parece chato, mas vira hábito e acaba funcionando muito bem.</p>
<blockquote>
<p>Lembre-se de que existem habilidades que a documentação de uma ferramenta <strong>nunca</strong> te ajudará a desenvolver.</p>
</blockquote>
<p>Com o tempo, você vai saber quando adotar um framework específico em escala, quando optar por bibliotecas monolíticas, e terá, inclusive, seus preferidos a ponto de não ter sempre que definir soluções possíveis para subproblemas que aplicações têm em comum.</p>
<p>(Em alguns projetos, você enxergará padrões, por exemplo: <a href="https://github.com/ded/qwery">qwery</a>, <a href="https://www.npmjs.com/package/domready">domready</a> e <a href="https://www.npmjs.com/package/lodash">lodash</a> são usados juntos frequentemente.)</p>
<p>Um dia, no entanto, suas ferramentas falharão, outras ferramentas se adaptão melhor à realidade de seus projetos, e, então, o ciclo de análise recomeça. E você já sabe como proceder.</p>
<h3 id="seja-curioso">Seja curioso <a class="title-anchor" href="#seja-curioso" aria-hidden="true">¶</a></h3>
<p>No mais, seja curioso sobre arquiteturas de software, padrões de projeto, <em>tooling</em> — basta ser leitor(a). Seja curioso também sobre opiniões, principalmente quando elas tratam de desafios que ainda não tivemos. A <strong>visão crítica</strong> é ideal para abandonar a cultura jQuery.</p>
<blockquote>
<p>O estudo permite que as soluções possíveis surjam mais intuitivamente.</p>
</blockquote>
<p>A prática virá com os desafios, e nesses desafios é que deve entrar o seu protagonismo de apresentar soluções possíveis.</p>
<h2 id="notas">Notas <a class="title-anchor" href="#notas" aria-hidden="true">¶</a></h2>
<p>Esse é um rascunho de pensamentos que venho acumulando há algum tempo em razão de experiências de trabalho que tive, e confesso que eles podem ter sido apresentados de forma confusa, embora eu tenha me esforçado. Mas isso aqui não era para ser receita de bolo, de verdade! Até mesmo os exemplos citados não devem passar de exemplos.</p>
<p>A minha abordagem possui falhas, e uma deles é que exige de quem desenvolve um conhecimento vasto de ferramentas, quando se usava apenas uma para tudo. (Para isso, recomendo um recurso disponível no <a href="https://www.npmjs.com">npm</a> e mecanismos de busca: a busca.)</p>
<p>Mas perceba que o conhecimento vasto é apenas de ferramentas. O conhecimento exigido pelas ferramentas em si acaba sendo menor do que o exigido por aquelas <em>all-in-one</em> como jQuery e AngularJS. O fato de encapsularmos dependências considerando a necessidade de cada componente no front-end é um modo de mantermos a curva de aprendizagem fragmentada.</p>
<p>De acordo com o que venho experimentando, desenvolver essa mentalidade tem retornado experiências maravilhosas e, inclusive, gerado menos código legado. Basta apenas aplicá-la à Engenharia de Software com bom senso.</p>
<h2 id="conteudo-sugerido">Conteúdo sugerido <a class="title-anchor" href="#conteudo-sugerido" aria-hidden="true">¶</a></h2>
<p>Os complementos abaixo são apenas para despertar a curiosidade em relação aos conceitos apresentados neste artigo, e não devem substituir o estudo necessário para deixar de lado, na prática, a “cultura jQuery”.</p>
<ul>
<li><a href="https://jsperf.com/virtual-dom-vs-real-dom">JSPerf: Real DOM vs Virtual DOM</a></li>
<li><a href="http://www.ebaytechblog.com/2014/10/02/dont-build-pages-build-modules/">Don’t Build Pages, Build Modules</a></li>
<li><a href="http://www.infoq.com/news/2014/05/facebook-mvc-flux">MVC Does Not Scale, Use Flux Instead</a></li>
<li><a href="https://medium.com/@milankinen/good-bye-flux-welcome-bacon-rx-23c71abfb1a7">Goodbye Flux, welcome Bacon/rx?</a></li>
<li>E, humildemente, o meu próprio blog, pois pretendo falar mais sobre arquiteturas de aplicação e front-end modular (que adoro!) na teoria e prática.</li>
</ul>
<hr>
<p><strong>Se você entendeu a razão pela qual a “cultura jQuery” distancia você do seu papel, a mensagem foi entregue com sucesso.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;summary&quot;&gt;
&lt;p&gt;Este não é um artigo sobre jQuery. Este é um artigo sobre ferramentas, sim, mas é, principalmente, um artigo sobre 
    
    </summary>
    
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
      <category term="javascript" scheme="https://diessi.ca/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>A Guide to Favicons and Touch Icons</title>
    <link href="https://diessi.ca/blog/a-guide-to-favicons-and-touch-icons/"/>
    <id>https://diessi.ca/blog/a-guide-to-favicons-and-touch-icons/</id>
    <published>2015-09-06T13:53:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<div class="summary">
<p>Favicon is a simplified visual element associated with a particular website, page or event, which you once found only in your browser’s address bar or bookmarks. Nowadays, the scenario is different: <strong>they are everywhere</strong>.</p>
</div>
<h2 id="introduction">Introduction <a class="title-anchor" href="#introduction" aria-hidden="true">¶</a></h2>
<p>Favicons provide a important visual indicator to people, and help them to easily associate your content (which can be a <em>website</em>, a <em>particular page</em> or even <em>events</em> like a new message) when browsing.</p>
<p>Formerly, they, also called shortcut icons or bookmark icons, were just tiny pieces of art designed to help users to browse through their tabs or bookmarks. Today, shortcut icons can also provide an app-like link on operational systems (Windows 8, Android, OS X and so on), and should therefore be considered for achieving a pleasant cross-platform experience.</p>
<p>This is a guide for using favicons today, the right way. At the end of this article, I’m sure you’ll be excited about SVG favicons.</p>
<p>If you don’t want to understand such a thing, just <a href="#Bulletproof_favicons">jump to the bulletproof solutions</a>.</p>
<h2 id="usage">Usage <a class="title-anchor" href="#usage" aria-hidden="true">¶</a></h2>
<p>Favicons in different dimensions are needed, so devices and browsers can pick the picture that fits best based on <code>sizes</code> attribute (little exception for Mozilla Firefox, which always gets the last favicon declared and scale it if necessary).</p>
<p>The images are not requested when not used. As said, browsers will get only what fits them best, therefore it’s important to provide the favicon in the required dimensions to avoid ugly scaled images.</p>
<h3 id="general">General <a class="title-anchor" href="#general" aria-hidden="true">¶</a></h3>
<pre><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- I'm lazy --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Browser tabs --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon-16x16.png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16x16<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Safari on OS X, IE10 Metro --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon-32x32.png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>32x32<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Google TV --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon-96x96.png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>96x96<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Chrome on Android --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon-192x192.png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192x192<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<div class="note">
<p>No need for <code>type=&quot;image/png&quot;</code> when using HTML5.</p>
</div>
<p>You’ll need to provide a manifest in order to Chrome on Android’s icon to work properly. See <a href="https://gist.github.com/diessica/44ddce58c6094ce64d1d"><code>manifest.json</code> example</a>.</p>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manifest.json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="lacking-of-png-support-on-ie-a-workaround">Lacking of PNG support on IE: a workaround <a class="title-anchor" href="#lacking-of-png-support-on-ie-a-workaround" aria-hidden="true">¶</a></h4>
<p>Internet Explorer until version 11 and Safari don’t support PNG favicons. However, you can provide a fallback for IE up to 9:</p>
<pre><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--[if IE]> &lt;link rel="shortcut icon" href="favicon.ico"> &lt;![endif]--></span>
</code></pre>
<div class="note">
<p>Notice the <code>shortcut</code>, which is a non-standard. Also, providing this fallback within a conditional comment is necessary; otherwise Chrome will use the ICO favicon, even if it supports PNG ones.</p>
</div>
<p><strong>I don’t recommend it</strong>, though, because IE 10 doesn’t support conditional comments (so it won’t get any favicon, as seen that it doesn’t support PNG too), and also because it encourages the use of the non-standard and confusing <code>shortcut</code>.</p>
<p>Luckily, you can workaround everything just placing a <code>favicon.ico</code> in the root directory (the browser will look for it <em>automagically</em>). Then <code>link</code> only the PNG favicon and don’t worry.</p>
<h3 id="web-clip-bookmarks">Web Clip bookmarks <a class="title-anchor" href="#web-clip-bookmarks" aria-hidden="true">¶</a></h3>
<p>iOS users can add websites to their home screen – shortcuts called “Web Clip bookmarks”. The default icon is a thumbnail screenshot of the page, but developers can specify one instead.</p>
<p>You will need to provide a lot of dimensions in order to support both new devices and older (iOS6 and prior), however.</p>
<p>There’s a no-HTML way and a HTML way to provide those icons. It’s up to you.</p>
<h4 id="no-html-touch-icon-file">No-HTML: Touch Icon file <a class="title-anchor" href="#no-html-touch-icon-file" aria-hidden="true">¶</a></h4>
<p>Add a <code>apple-touch-icon-*.png</code> file, where <code>*</code> is the size to the root directory, instead. iOS Safari will look for the appropriate icon size, and if it doesn’t find any that fits best, it’ll use <code>apple-touch-icon.png</code>.</p>
<h4 id="link-tags">Link tags <a class="title-anchor" href="#link-tags" aria-hidden="true">¶</a></h4>
<p>You can reuse the image of another favicon specifying a <code>href</code> (not possible while using the solution above).</p>
<pre><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Non-retina iPhone pre iOS 7 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>57x57<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-57x57.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Non-retina iPad pre iOS 7 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60x60<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-60x60.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72x72<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-72x72.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Non-retina iPad iOS 7 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>76x76<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-76x76.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Retina iPhone pre iOS 7 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>114x114<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-114x114.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Retina iPhone iOS 7 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120x120<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-120x120.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Retina iPad pre iOS 7 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>144x144<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-144x144.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Retina iPad iOS 7 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>152x152<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-152x152.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- iOS 8 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180x180<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon-180x180.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<div class="note">
<p>Using <code>apple-touch-icon-precomposed</code> instead of <code>apple-touch-icon</code>, which prevents iOS icons defaults like rounded corners and reflective shine, isn’t necessary, as seen that there isn’t <em>shiny effects</em>  on iOS 7 and up anymore.</p>
</div>
<h3 id="windows-tiles">Windows Tiles <a class="title-anchor" href="#windows-tiles" aria-hidden="true">¶</a></h3>
<p>Tiles are icons that appear on the Start screen, linked as apps. By default, the image on the tile is the website’s favicon or a default IE11 logo.</p>
<p class="note">To cover a wide range of devices, use an image 1.8 times the standard tile size so the image can be scaled up or down as needed.</p>
<p>There’s a no-HTML way and a HTML way to provide those icons. It’s up to you, again.</p>
<h4 id="no-html-browser-config-file">No-HTML: Browser config file <a class="title-anchor" href="#no-html-browser-config-file" aria-hidden="true">¶</a></h4>
<p>Provide a <code>browserconfig.xml</code> file and save it at the root of your server. Internet Explorer 11 will automatically read the file when the user pins the website. See <a href="https://gist.github.com/diessica/73a4d53cd26b4d35f410"><code>browserconfig.xml</code> example</a>.</p>
<h4 id="metadata-tags">Metadata tags <a class="title-anchor" href="#metadata-tags" aria-hidden="true">¶</a></h4>
<p><code>msapplication-TileColor</code> is the background color of the tile, and <code>msapplication-TileImage</code> is the icon, which can be tiny (70 × 70px), square (150 × 150px), wide (310 × 150px) or large (310 × 310px).</p>
<pre><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Windows Tile --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-TileColor<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-TileImage<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tile-icon.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Different Windows Tiles (optional) --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-square70x70logo<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tile-icon_tiny.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-square150x150logo<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tile-icon_square.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-wide310x150logo<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tile-icon_wide.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msapplication-square310x310logo<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tile-icon_large.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="bulletproof-favicons">Bulletproof favicons <a class="title-anchor" href="#bulletproof-favicons" aria-hidden="true">¶</a></h2>
<ul>
<li>For Touch Icons, add <code>apple-touch-icon.png</code> and <code>apple-touch-icon-*.png</code> files, where <code>*</code> is the size, to the root directory.</li>
<li>For IE support, add a <code>favicon.ico</code> file with both 16 × 16px and 32 × 32px resources to the root directory.</li>
<li>For Windows Tiles, add a <code>browserconfig.xml</code> to the root directory.</li>
<li>For Chrome on Android icon, add a <code>manifest.json</code> to the root directory.</li>
<li>Add the following HTML to <code>&lt;head&gt;</code>:</li>
</ul>
<pre><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Chrome on Android --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon-192x192.png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192x192<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manifest<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>manifest.json<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Google TV --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon-96x96.png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>96x96<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Safari on OS X, IE10 Metro --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon-32x32.png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>32x32<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Browser tabs --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon-16x16.png<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16x16<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<div class="note">
<p>Order matters here! Mozilla Firefox ignores <code>sizes</code> and always get the last favicon for the browser tabs. 😦</p>
</div>
<p>Or you can add all the favicons through <code>meta</code> and <code>link</code> tags.</p>
<h2 id="favicon-as-svg">Favicon as SVG <a class="title-anchor" href="#favicon-as-svg" aria-hidden="true">¶</a></h2>
<div class="note">
<p>Not encouraged as an unique solution, as seen that isn’t <a href="http://caniuse.com/#feat=link-icon-svg">widely supported</a> yet.</p>
</div>
<p>I’m excited about this:</p>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon.svg<span class="token punctuation">"</span></span> <span class="token attr-name">sizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>any<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/svg+xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
<h2 id="final-words">Final words <a class="title-anchor" href="#final-words" aria-hidden="true">¶</a></h2>
<p>I’m sure you are now excited about SVG support for favicons. Providing a lot of different images is quite boring.</p>
<p>I encourage you to support favicons everywhere (or at least retina-ready ones), but unfortunately there’s no human-friendly way to do it nowadays. Use <a href="https://www.npmjs.com/package/favicons">favicons package</a> on npm or, if you are not comfortable with the command line, refer to <a href="http://realfavicongenerator.net">RealFaviconGenerator</a>.</p>
<p>Don’t be lazy.</p>
<h2 id="references">References <a class="title-anchor" href="#references" aria-hidden="true">¶</a></h2>
<ul>
<li><a href="https://developer.android.com/training/tv/index.html#favicons">Android Documentation</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html">Apple Documentation</a></li>
<li><a href="http://realfavicongenerator.net/faq">RealFaviconGenerator FAQ</a></li>
<li><a href="https://mathiasbynens.be/notes/touch-icons">Everything you always wanted to know about touch icons</a></li>
<li><a href="http://caniuse.com/#feat=link-icon-svg">SVG favicons support</a></li>
<li><a href="http://caniuse.com/#feat=link-icon-png">PNG favicons support</a></li>
<li><a href="http://iconhandbook.co.uk/reference/chart/">Icon handbook</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/dn455106.aspx">Creating custom tiles for IE11 websites</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;summary&quot;&gt;
&lt;p&gt;Favicon is a simplified visual element associated with a particular website, page or event, which you once found on
    
    </summary>
    
    
      <category term="html" scheme="https://diessi.ca/blog/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Do You Help People out There?</title>
    <link href="https://diessi.ca/blog/do-you-help-people-out-there/"/>
    <id>https://diessi.ca/blog/do-you-help-people-out-there/</id>
    <published>2015-08-28T23:32:12.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>My GPS doesn’t work, again. And this isn’t the first time I’m not sure where I’m going to.</p>
<p>It’s frightening when you have to count on people to reach somewhere, even when you live in a country where lost people are often helped out.</p>
<p>By the way, I’ve heard that in some countries people aren’t likely to give you any information if you ask them to. They won’t stop for you, they won’t care about you. Well, I didn’t find it any good at all.</p>
<p>I’m used to this sensation in my stomach, though being sure of the unknown always bring different feelings. Always. You just can’t know what is going to happen to you. <strong>It doesn’t depend on you.</strong></p>
<p>“Place” here means a physical place, not a metaphor. I’m alone inside a bus in Porto Alegre, I have to find a place, but I’m not really sure where is it. Will people in street help me out just like the last time?</p>
<p>I hope so.</p>
<figure><picture><source media="(min-width: 63.125rem)" srcset="../../media/2015/moinhos-de-vento.jpg"><source media="(min-width: 45rem)" srcset="../../media/2015/moinhos-de-vento_medium.jpg" ><source media="(max-width: 45rem)" srcset="../../media/2015/moinhos-de-vento_small.jpg"><img srcset="../../media/2015/moinhos-de-vento.jpg" alt="Moinhos de Vento Park, Porto Alegre"></picture>
<figcaption>Moinhos de Vento Park, Porto Alegre (I got there thanks to the people!)</figcaption></figure>
<p><em>Help people to find their path when they ask you for information. Be kind, because I’m afraid this is how people feel when lost.</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;My GPS doesn’t work, again. And this isn’t the first time I’m not sure where I’m going to.&lt;/p&gt;
&lt;p&gt;It’s frightening when you have to count
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
  <entry>
    <title>Como Eu Vi a BrazilJS 2015</title>
    <link href="https://diessi.ca/blog/como-eu-vi-a-braziljs-2015/"/>
    <id>https://diessi.ca/blog/como-eu-vi-a-braziljs-2015/</id>
    <published>2015-08-26T05:10:32.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>É mais experiente que volto de mais uma BrazilJS, evento que acontece na cidade onde nasci desde <a href="http://braziljs.com.br/2012">2012</a>. Aqui, compartilho não um relatório técnico das palestras, não acusações do que foi ruim ou bom, mas minhas visões, em conjunto, sobre a conferência e a comunidade.</p>
<p>Importante observar que <strong>não</strong> seleciono aqui a “nata” do evento. Não é minha intenção desmerecer qualquer acontecimento. Meu objetivo com esse texto é somente compartilhar o meu ponto de vista sobre o que penso que deve ser comentado.</p>
<h2 id="o-primeiro-dia">O primeiro dia <a class="title-anchor" href="#o-primeiro-dia" aria-hidden="true">¶</a></h2>
<p>O meu dia começou localizando onde seria o evento. Neste ano, foi no BarraShoppingSul; um shopping que, considerando os outros da cidade, é de difícil acesso mesmo para quem mora há alguns quilômetros de Porto Alegre.</p>
<p>O Centro de Convenções, ao menos, foi fácil de achar, e o <em>check-in</em> ocorreu como esperado: pontual. As meninas que forneceram minha credencial estavam de ótimo humor — e olha que era um dos primeiros horários da manhã de sexta! Ano passado, o meu <em>check-in</em> foi feito pelo Jaydson, o que fez eu me perguntar onde estaria ele, se não credenciando os participantes do evento.</p>
<p>…E, na verdade, ele tinha se tornado um Power Ranger junto com o Felipe. E Power Rangers não fazem <em>check-in</em>. Descobri isso da pior maneira.</p>
<h3 id="uma-abertura-idiota">Uma abertura idiota <a class="title-anchor" href="#uma-abertura-idiota" aria-hidden="true">¶</a></h3>
<p>Dois desenvolvedores, os organizadores desse evento que trouxe mais de mil pessoas para o mesmo lugar, brincando de “lutinha” na frente de todo mundo, vestidos de Power Rangers só porque o JavaScript fez 20 anos. <strong>Essa foi a abertura da BrazilJS</strong>, e eu não mudaria nada.</p>
<p>Muita gente riu. Muita gente aplaudiu. Eu ri e aplaudi, e aplaudiria de novo, pois, sim, brincaram, mas também fizeram um trabalho muito sério. Ainda vestidos de Power Rangers, falaram um pouco da história da conferência e das expectativas para esse ano, finalizando com uma mensagem sobre a importância da diversidade e, sobretudo, do respeito.</p>
<p>Os eventos que se seguiram mostraram que, sim, o trabalho era sério.</p>
<h3 id="christian-heillman">Christian Heillman <a class="title-anchor" href="#christian-heillman" aria-hidden="true">¶</a></h3>
<blockquote>
<p>“We are there for them. Not they for us.”</p>
</blockquote>
<p>Com uma camiseta do Brasil, Christian chegou com um dos assuntos mais importantes na atualidade, e que está dando muito o que falar: <em>pushing the web forward</em>. Palavras de protagonismo, reiteração do <strong>nosso papel</strong>, motivação para acreditar na web e no nosso trabalho, e, o mais importante: como isso deve ser feito. Falou, claro, sobre o ECMAScript 6, sobre o Babel, e fez uma análise de como resolvemos os problemas atualmente.</p>
<blockquote>
<p>“We all know the DOM is slow, terrible and to blame for all our problems. Did we allot it to say that way and still be a problem as we <strong>abstracted its issues away?</strong>”</p>
</blockquote>
<p>Acredito que essa essa frase foi pesada para muita gente, principalmente em quem está deprimido de tanto <em>estudar</em> soluções. Christian mostra que, ao trabalharmos com web, não somos apenas desenvolvedores ou designers (ao menos não deveríamos ser). Somos também <strong>web makers</strong>, e esse é o principal problema de simplesmente abstrair e deixar para lá.</p>
<p>É fácil entender a razão dessa abordagem. Heillman trabalha no time de desenvolvimento do Microsoft Edge, o novo e surpreendente navegador padrão do Windows 10, e esse é o ponto de vista dele enquanto <em>browser maker</em>: somos a representação máxima do protagonismo, e, por isso, desenvolver não deve limitar-se a <em>frameworks</em> ou <em>libraries</em>. Estamos em uma posição em que inovar sempre que possível é visto como uma contribuição, e ele  ensina a entender esse ponto de vista desde a analogia feita logo nos primeiros slides. Não devemos esperar que a inovação venha apenas de grandes companhias.</p>
<p>Não disse para pararmos de usar ES6 com Babel. Não disse para usarmos ES6 em produção e beber água de coco na praia. Mas não é mentira que existem casos em que podemos, se assim desejarmos, relatar o que está de errado e o que faz falta, e é justamente aí que o nosso protagonismo é máximo.</p>
<p>Os argumentos foram reúnidos, as situações em que podemos nos tornar <em>web makers</em> foram apresentadas, e tudo em prol de provar o nosso protagonismo.</p>
<blockquote>
<p>You are a creator of the next web!</p>
</blockquote>
<p>Sem dúvidas, uma das melhores palestras que já assisti na minha vida. É difícil relatar uma interpretação detalhada sobre a mensagem do Christian, mas, aos que já se sentiram no dever de fazer a web um lugar melhor alguma vez e nunca deixaram de acreditar nessa mídia, acho que essas minhas palavras foram mais que o suficiente para compreender o pensamento dele. Simples e sensacional.</p>
<h3 id="use-lowlevel">Use lowlevel <a class="title-anchor" href="#use-lowlevel" aria-hidden="true">¶</a></h3>
<p>Tive dificuldades em acompanhar o raciocínio do Douglas Campos algumas vezes, e noto que isso se deu em razão de ele não estar falando a língua nativa. Não entro aqui no mérito das palestras em Inglês ou Português (para mim tanto faz desde que o palestrante consiga passar a mensagem de forma fluente na língua escolhida), mas reforço a importância de fazer a escolha certa, pois a tua escolha afeta um público que está confiando na tua capacidade enquanto transmissor.</p>
<p>Douglas falou sobre compiladores, e engajou os desenvolvedores a entender <em>how things work under the hood</em>, explorando conceitos como AST (<em>Abstract Syntax Tree</em>), um assunto que está finalmente chamando a atenção em JavaScript, tanto que não foi a primeira vez que foi abordado na BrazilJS.</p>
<p>Acredito que o questionamento que o palestrante buscou provocar no público não teve êxito. Os 30 minutos, infelizmente, não foram bem aproveitados e não atenderam às perguntas que o Douglas tentou provocar e responder. Ficou a sensação de uma mensagem subentendida, no entanto:</p>
<blockquote>
<p>“It’s really important for us to take a look at the things we don’t necessarily like.”</p>
</blockquote>
<h3 id="javascript-at-spotify">JavaScript at Spotify <a class="title-anchor" href="#javascript-at-spotify" aria-hidden="true">¶</a></h3>
<p>Felipe Ribeiro juntou os desafios encontrados durante a transição do Spotify (nativo com C++ para híbrido), e o resultado foi uma palestra bastante completa sobre arquitetura e engenharia de software. Diversificou bastante a programação da conferência, e mostrou que devemos analisar a necessidade de re-escrita de código em uma aplicação complexa sob uma ótica criteriosa que equilibra <strong>utilidade</strong>, <strong>valor</strong> e <strong>esforço necessário</strong>.</p>
<h4 id="desafios">Desafios <a class="title-anchor" href="#desafios" aria-hidden="true">¶</a></h4>
<p>Os desafios foram bastante interessantes. Um deles foi o <strong>gerenciamento de memória</strong> no Spotify, já que se trata de uma aplicação que não é descartada com a mesma frequência de um site. Outro, a <strong>organização do código</strong>, que era excessivamente fragmentado, o que prejudicava a padronização (diferentes versões de módulos), manutenção (atualização em “efeito cascata”) e integração contínua do projeto.</p>
<h4 id="releases">Releases <a class="title-anchor" href="#releases" aria-hidden="true">¶</a></h4>
<p>O Spotify estabeleceu uma cultura colaborativa de testes (sempre gostei dessa abordagem!). Os empregados usam somente versões experimentais da aplicação, ajudando a testar e agilizar os <em>hotfixes</em>. O release é gradual, e é distribuído na medida em que a versão vai apresentando estabilidade aos usuários que já possuem acesso.</p>
<h3 id="a-saga-dos-12-topicos-de-acessibilidade">A saga dos 12 tópicos de acessibilidade <a class="title-anchor" href="#a-saga-dos-12-topicos-de-acessibilidade" aria-hidden="true">¶</a></h3>
<p>A primeira vez que conheci o Reinaldo Ferraz foi no Front in POA em 2012. Na época, acessibilidade era mais novidade para as pessoas do que Sass. Todos conheciam Sass, ninguém conhecia WCAG.</p>
<p>Lembro de ter sido uma das palestras mais marcantes e diferentes do evento, e não foi diferente na BrazilJS. Esta foi a mensagem que ficou:</p>
<blockquote><p>"Aplicar técnicas de acessibilidade em um site com usabilidade ruim é como passar batom em um porco. Não importa o quanto você passe, ele continuará sendo um porco."</p><footer>— <cite><a href="http://webaim.org/blog/accessibility-lipstick-on-a-usability-pig/">Acessibility Lipstick on a Usability Pig</a></cite></footer></blockquote>
<h3 id="500-days-of-open-source">500 days of open source <a class="title-anchor" href="#500-days-of-open-source" aria-hidden="true">¶</a></h3>
<p>Uma palestra que dividiu bastante o público. Na verdade, acredito que o Raphael Amorim deu o melhor dele para fazer o discurso significar exatamente o que ele queria que significasse. O Raphael sabe se comunicar muito bem, e paciência foi o único requisito para captar a mensagem.</p>
<p>Vi muita dedicação na apresentação que ele fez. Organizou os aprendizados e os desafios de seguir à risca <a href="http://ejohn.org/blog/write-code-every-day/">a proposta do John Resig</a>, e os apresentou mostrando que “preencher grade de contribuições” ou “se sentir no dever todo dia” não é o suficiente para progredir. Inclusive, para quem acredita que isso é o suficiente, apresentou o <a href="https://github.com/avinassh/rockstar">Rockstar</a>.</p>
<p>Esse tipo de palestra é <strong>essencial</strong>, e eu não estou disposta a discutir isso com ninguém. Havia mais de mil pessoas no mesmo lugar, e, por mais que não pareça, é uma minoria que contribui ou gerencia algum projeto open source, e também é uma minoria que contribui há tempo o suficiente para passar por todos os desafios que o Raphael passou. Foi uma palestra sobre open source, mas também sobre esforço e saber o que está te movendo para se esforçar mais: <strong>criar</strong>.</p>
<p>(Entendi o trocadilho no nome, a propósito.)</p>
<h3 id="david-bryant">David Bryant <a class="title-anchor" href="#david-bryant" aria-hidden="true">¶</a></h3>
<blockquote>
<p>Happy birthday, JavaScript!</p>
</blockquote>
<p>Terminou o primeiro dia de BrazilJS tal como o Christian o iniciou: fazendo-nos acreditar no que trabalhamos. David Bryant, que faz parte do <a href="https://www.mozilla.org/en-US/about/leadership/"><em>leadership team da Mozilla</em></a>, falou sobre a evolução do JavaScript até o seu aniversário de 20 anos, e em como devemos acreditar na web em detrimento da plataforma nativa. Para isso, lembrou da palestra Nick Desaulniers, anterior a dele, que mostrava quanto esforço tem sido feito para que a web alcance a plataforma nativa.</p>
<p>David, representando a Mozilla, deixou óbvia a mensagem: <em>a web é a melhor plataforma</em>.</p>
<h2 id="o-segundo-dia">O segundo dia <a class="title-anchor" href="#o-segundo-dia" aria-hidden="true">¶</a></h2>
<h3 id="what-can-you-build-with-a-log">What can you build with a log <a class="title-anchor" href="#what-can-you-build-with-a-log" aria-hidden="true">¶</a></h3>
<p>James começa explicando sua motivação: a impermancência e a centralização do conteúdo são coisas negativas da web. O que podemos fazer sobre isso? Ué, abrir o Vim, e construir meu cliente torrent, Flickr, Twitter…</p>
<p>O Substack é uma pessoa extremamente simples e humilde. É impossível não achá-lo, no mínimo, adorável. Um dos <em>live codings</em> mais fluídos e espontâneos que já assisti.</p>
<h3 id="reduce-seu-novo-melhor-amigo">Reduce: seu novo melhor amigo <a class="title-anchor" href="#reduce-seu-novo-melhor-amigo" aria-hidden="true">¶</a></h3>
<p>A Ju Gonçalves explicou o uso do <code>reduce()</code> na prática. (Na prática mesmo, para sair da BrazilJS usando, caso nunca tenha usado.)</p>
<p>O tema escolhido complementou muito bem a palestra de programação funcional do Jacob Page, anterior a dela. O formato ficou perfeito para 30 minutos (a propósito, a ideia de abordar apenas o <code>reduce()</code> foi muito legal!), e deu para aprofundar bastante em algo que deve fazer parte do dia a dia. Só fiquei com a sensação de que 5 minutos a mais ajudariam ela a guiar os exemplos com mais calma. O tempo estava bastante inflexível nesse quesito.</p>
<p>Enfim, a Ju sabe o que faz. Não a conhecia pessoalmente ainda, mas conheço o trabalho e o entusiasmo dela e apostaria nela de longe, tal como a organização da conferência, sem dúvidas, fez.</p>
<h3 id="ecmascript-6-o-que-ha-de-novo-o-que-mudou-o-que-tem-de-bacana-ou-de-estranho">ECMAScript 6: O que Há de Novo, O que Mudou, O que tem de Bacana ou de Estranho! <a class="title-anchor" href="#ecmascript-6-o-que-ha-de-novo-o-que-mudou-o-que-tem-de-bacana-ou-de-estranho" aria-hidden="true">¶</a></h3>
<p>Título engraçado.</p>
<p>Quem foi na BrazilJS do ano passado sabe muito bem quem é Jonathan Sampson. Em 2014, <a href="https://youtu.be/MMOZOkGfGGg?t=80">ele deu um nó na cabeça do Daniel Filho</a> ao falar Português durante a entrevista.</p>
<p>No entanto, ano passado ele palestrou em Inglês. Neste ano, ele falou sobre o ES6 totalmente em <strong>Português</strong>, e fez muita gente rir com coisas simples, como, por exemplo, referir-se aos que não entendiam <em>hoisting</em> de variáveis como “<strong>chorões</strong> do Stack Overflow”, ou até mesmo perguntar como se traduz <em>replace</em> (todo mundo sabe que é “substchitutituir”, no caso).</p>
<h3 id="javascript-robotics-a-nodebots-show">JavaScript Robotics: A NodeBots show <a class="title-anchor" href="#javascript-robotics-a-nodebots-show" aria-hidden="true">¶</a></h3>
<p>Julián Duque é uma pessoa admirável. Eu fico realmente muito alegre vendo o envolvimento dele com projetos como a <a href="http://nodeschool.io">NodeSchool</a>. Pelo tópico da palestra, dá para ver como ele acredita bastante em JavaScript.</p>
<p>Como o <a href="https://twitter.com/seldo/status/635195901951107072">Laurie disse</a>, o trabalho feito foi sensacional. Mereceu todos os aplausos recebidos, tanto pela apresentação quanto pelos projetos paralelos que organizou.</p>
<p>E <a href="https://twitter.com/julian_duque/status/635209141217296385">ele fala Português</a> (não só no Twitter).</p>
<h3 id="brendan-eich">Brendan Eich <a class="title-anchor" href="#brendan-eich" aria-hidden="true">¶</a></h3>
<p>Não estive na BrazilJS 2012, então esse foi o meu primeiro encontro com aquele conhecemos como <strong>criador do JavaScript</strong>.</p>
<p>A palestra dele foi engraçada, motivacional e também técnica. Falou sobre como foi criar o JavaScript em 10 dias, deu explicações sobre o <a href="http://www.wtfjs.com/">wtfjs</a>, e mostrou o quanto valeu a pena acreditar no JavaScript.</p>
<p>Terminou com a frase que foi a grande mensagem da BrazilJS 2015: <em>always bet on JS</em>.</p>
<h2 id="o-fim">O fim <a class="title-anchor" href="#o-fim" aria-hidden="true">¶</a></h2>
<p>O evento acabou com um show de rock e cerveja artesanal. Não sou uma pessoa agitada, nem gosto de beber cerveja, nem queria me arriscar a chegar tarde em casa (voltaria de ônibus), então me limitei a finalizar meu dia indo falar com o Daniel Filho, que estava com outras duas pessoas, o Leonardo Balter e o <a href="http://igorapa.com/fui-aprender-ingles.html">Igor-que-foi-aprender-Inglês</a>.</p>
<p>(Conversar com o Leonardo faz bem para a mente, pois ele não só se dispõe a te ouvir como também te recebe bem. Se um dia encontrá-lo, inicie uma conversa, talvez você ganhe um grande amigo.)</p>
<p>Saindo do BarraShoppingSul, lembro que, fora do shopping, aquele é um lugar deserto. <strong>Deserto</strong>. Em direção a parada, com meu computador na mochila, encontro um homem que promete não me assaltar e que só quer dinheiro para ir para casa. Dou o que tenho para ajudar, e ele insiste que eu dê mais, afirmando <em>saber</em> que eu tenho mais. Nego gentilmente, e entro no T4 para ir embora logo. E, aos que não conhecem Porto Alegre, o T4 é simplesmente <a href="http://zh.clicrbs.com.br/rs/porto-alegre/noticia/2014/12/a-rotina-do-t4-o-onibus-campeao-de-assaltos-em-porto-alegre-4658335.html">o ônibus mais inseguro da cidade</a>.</p>
<p>Era um assaltante. Isso foi me dito no ônibus por uma moça, que disse também que tive sorte de não ter sido assaltada. Não entendi o que me salvou, se foi a distância que mantive do homem, se foi o fato de eu não estar desatenta no celular… Enfim, cheguei em casa bem e feliz com os dois dias que se passaram.</p>
<h2 id="notas-sobre-o-espaco">Notas sobre o espaço <a class="title-anchor" href="#notas-sobre-o-espaco" aria-hidden="true">¶</a></h2>
<ul>
<li>O lugar onde a conferência ocorreu é legal, pareceu bem mais aberto que o Bourbon Country e não distancia as pessoas de quem palestra. O Teatro do Bourbon Country é confortável, exageradamente belo, possui uma ótima acústica; mas, além de enjoar, valoriza muito quem está palestrando, pois é um espaço para dar palestras e nada mais. Todo o networking que acontece ali é fora de onde as palestas ocorrem.</li>
<li>O espaço não é mais aberto no sentido de <strong>não te sufocar</strong>. O local fica no subsolo do shopping, portanto, não há acesso fácil e sem demora a rua, como havia no Bourbon Country. Lembro bem de ver o sol na BrazilJS do ano passado. Parece pouco, mas é muito importante quando se fica dois dias no mesmo lugar, com luz artificial e tal. Isso simplesmente dá muita abertura para acelerar a fadiga, ainda mais que você acaba comendo no shopping pela facilidade (pois a única coisa que tem no bairro do Barra é o próprio Barra, sério), então você nunca sai dali. Sinceramente, durante essa BrazilJS, eu esqueci que orbitávamos ao redor de uma estrela chamada Sol. (Esse parágrafo é muito pessoal, realmente não espero que ninguém concorde comigo com meus exageros, e de nenhuma forma exijo que sejam levados em consideração.)</li>
<li>Muitas pessoas levam notebooks e o Espaço BrazilJS foi uma ótima ideia para lidar com isso. Conciliou o útil (reconferir palestras, programar durante <em>coffee break</em>) ao agradável (não ficar no computador durante palestras). É muito legal ter um lugar para ficar com o notebook, embora eu não recomende levar caso vá embora de ônibus, como vivenciei.</li>
</ul>
<h2 id="notas-finais">Notas finais <a class="title-anchor" href="#notas-finais" aria-hidden="true">¶</a></h2>
<ul>
<li>Foi difícil comer e beber no primeiro dia. Percebi que, em vez de as pessoas organizarem-se em filas, muitas ficavam no entorno da mesa do <em>coffee break</em>, e isso dificultou muito o fluxo. No segundo dia, no entanto, foi bem mais organizado.</li>
<li>Os organizadores não param. Estão sempre envolvidos com o evento, resolvendo pendências e atendendo a feedbacks. Houve dedicação integral por parte do Daniel, Felipe e Jaydson em fazer uma conferência confortável para todos. O segundo dia não foi mais tranquilo porque simplesmente foi e a a conferência deste ano não foi mais diversa porque simplesmente foi. Agradeço a eles por isso.</li>
<li>Percebi uma mudança de formato em vários aspectos neste ano, e a principal delas foi a <strong>redução da duração das palestras</strong>. Bastante notável. 30 minutos por padrão, e aproximadamente 1 hora para <em>keynotes</em>. Gostei bastante, já que possibilitou uma transição bem saudável entre assuntos e palestrantes, o que ajuda muito a digerir o conteúdo. A BrazilJS dura 2 dias inteiros que terminam cansativos, e é fato que isso acelera o cansaço, mesmo quando a apresentação está muito interessante.</li>
<li>Quanto mais eu comia o chocolate da Mozilla, mais eu queria. Tive de comer 7 seguidos para satisfazer o meu consumo desenfreado de açúcar. E não recomendo para ninguém.</li>
<li>A quantidade de homens é avassaladora. Embora as iniciativas em apoio à diversidade tenham sido realmente efetivas (vi, por exemplo, mais mulheres neste ano), sabe-se bem que uma mulher na BrazilJS é <strong>uma mulher em meio a homens</strong>. É o que a proporção permite afirmar.</li>
<li>Não havia camisetas da BrazilJS para mim, e isso me deixou um pouco triste, pois elas estavam muito bonitas neste ano. Segundo o Eu Compraria, a confecção foi apenas de versões masculinas da camiseta. No entanto, o problema não é a versão ser masculina, o problema é que o tamanho P da versão masculina é gigante em mim. Até a vendedora ficou com dó da minha situação. 😦</li>
<li>O BarraShoppingSul é um shopping completo e muito espaçoso, mas o bairro onde ele está é bastante inseguro e difícil de acessar caso você não esteja vindo de carro.</li>
<li>O Daniel Filho é um apresentador muito legal.</li>
<li>A BrazilJS 2015 foi ótima, e isso me deixa bastante ansiosa para a conferência de 2016.</li>
</ul>
<p>Até o próximo ano!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;É mais experiente que volto de mais uma BrazilJS, evento que acontece na cidade onde nasci desde &lt;a href=&quot;http://braziljs.com.br/2012&quot;&gt;20
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
  </entry>
  
  <entry>
    <title>Multiline Sass Comments</title>
    <link href="https://diessi.ca/blog/multiline-sass-comments/"/>
    <id>https://diessi.ca/blog/multiline-sass-comments/</id>
    <published>2015-08-17T03:00:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Since the beginning of this year, I’ve created a lot of different boilerplates for projects. Working as a freelancer makes you challenge yourself everyday to find out what fits better while working. Currently, it’s sometimes Stylus, sometimes Sass.</p>
<p>Stylus is flexible, and I love it. Sass isn’t, but it’s cool anyway. Sometimes I find it hard to bear its inflexibility, though.</p>
<p>On GitHub, there’s a closed <a href="https://github.com/sass/sass/issues/338">issue about multiline comments on Sass</a>  (<em>a Stylus feature!</em>), where I shared a solution for multiline Sass comments. A lot of people still don’t agree.</p>
<p>I just want people on community to know it, because it needs to be discussed.</p>
<h2 id="solution">Solution <a class="title-anchor" href="#solution" aria-hidden="true">¶</a></h2>
<p>Start writing the comment as if it were single-line (<code>//</code>), then just follow its indentation. <a href="https://github.com/sass/sass/issues/338#issuecomment-131855911">Example</a>.</p>
<pre><code class="language-css">// Multine comment
   Indent the text
   And this will be a comment too
</code></pre>
<p>Is it available on Sass docs? Let me know!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Since the beginning of this year, I’ve created a lot of different boilerplates for projects. Working as a freelancer makes you challenge 
    
    </summary>
    
    
      <category term="css" scheme="https://diessi.ca/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Desmitificando Seletores Complexos</title>
    <link href="https://diessi.ca/blog/desmitificando-seletores-complexos/"/>
    <id>https://diessi.ca/blog/desmitificando-seletores-complexos/</id>
    <published>2013-11-28T02:00:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Se existem recursos no CSS que a total compreensão se restringe a uma parcela de desenvolvedores, esses são os combinadores filhos (&gt;), irmãos adjacentes (+) e adjacentes gerais (~).</p>
<p>Sem dúvidas, esses 3 combinadores são tão poderosíssimos quanto mal-explicados. É importante compreendê-los integralmente e há dois bons motivos para isso: o seletor descendente não dá conta de tudo e, o óbvio: o CSS está evoluindo.</p>
<h2 id="x-y">X &gt; Y <a class="title-anchor" href="#x-y" aria-hidden="true">¶</a></h2>
<blockquote>
<p><q>Todo filho é necessariamente descendente, mas nem todo descendente é necessariamente filho.</q></p>
<footer>— <cite>Eu, sobre família</cite></footer>
</blockquote>
<p>Para que Y seja alvo da seleção, não importa a posição; basta que seja descendente direto de X - isso é, filho. Em outras palavras, basta que esteja interno diretamente ao elemento pai - e seja somente descendente dele. Isso quer dizer que Y não será alvo caso esteja interno a um elemento Z, mesmo que este esteja interno a X. Por essa razão o combinador “&gt;” é também chamado de <strong>direto</strong>, pois não admite elementos internos indiretamente.</p>
<h3 id="seletor-descendente-vs-seletor-filho">Seletor descendente vs. seletor filho <a class="title-anchor" href="#seletor-descendente-vs-seletor-filho" aria-hidden="true">¶</a></h3>
<p>Lembrando da frase dita no início desse tópico, você já entende a diferença. Enquanto o <strong>descendente</strong> (X Y) herda as propriedades aos elementos direta e indiretamente internos (filhos, netos, bisnetos…), o alvo do <strong>combinador filho</strong> são os filhos unicamente diretos - sim, falar isso é redundante. O que faz todo sentido, afinal, um filho é tanto filho quanto descendente; e o neto, bisneto, trineto não é um filho, mas é descendente.</p>
<h4 id="na-pratica">Na prática <a class="title-anchor" href="#na-pratica" aria-hidden="true">¶</a></h4>
<p>Imaginemos um artigo e seus respectivos parágrafos. Dentro desse artigo, haverá uma seção de informações que não estará diretamente relacionada ao artigo. Como o que se quer destacar é a leitura do artigo, seus parágrafos terão mais ênfase de alguma forma.</p>
<h5 id="html">HTML <a class="title-anchor" href="#html" aria-hidden="true">¶</a></h5>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Título do artigo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Primeiro parágrafo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Segundo parágrafo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Informações<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Lorem ipsum dolor sit amet, consectetur adipisicing elit.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Terceiro parágrafo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>
</code></pre>
<h5 id="css">CSS <a class="title-anchor" href="#css" aria-hidden="true">¶</a></h5>
<pre><code class="language-css"><span class="token selector">article > p</span> <span class="token punctuation">{</span>
  <span class="token property">font-style</span><span class="token punctuation">:</span> italic<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Assim, somente os parágrafos que são filhos diretos do elemento <strong>article</strong> serão estilizados.</p>
<h2 id="x-y-2">X + Y <a class="title-anchor" href="#x-y-2" aria-hidden="true">¶</a></h2>
<p>Se para ser alvo do seletor filho a posição era irrelevante, para ser alvo de um <strong>seletor irmão adjacente</strong> sua posição é critério decisivo. O elemento Y deve ser o primeiro elemento após X, com ambos dentro de um mesmo elemento Z (pai). O nome, portanto, é bem autoexplicativo: são <strong>irmãos</strong> por possuírem o mesmo pai (no caso, Z) e <strong>adjacentes</strong> por estarem necessariamente próximos.</p>
<h4 id="na-pratica-1">Na prática 1 <a class="title-anchor" href="#na-pratica-1" aria-hidden="true">¶</a></h4>
<p>Supondo um artigo constituído por um título e 3 parágrafos. O primeiro parágrafo após o título servirá como uma introdução ao artigo e, portanto, deve ser destacado com um aumento no tamanho da fonte.</p>
<h5 id="html-2">HTML <a class="title-anchor" href="#html-2" aria-hidden="true">¶</a></h5>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- Z --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Título do artigo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- X --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Lorem ipsum dolor sit amet, consectetur adipisicing elit.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- Y --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Debitis sint aperiam numquam nisi animi porro in reprehenderit!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Magnam atque placeat fuga sed eligendi maxime neque labore. Doloribus?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>
</code></pre>
<h5 id="css-2">CSS <a class="title-anchor" href="#css-2" aria-hidden="true">¶</a></h5>
<pre><code class="language-css"><span class="token selector">h1 + p</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="na-pratica-2">Na prática 2 <a class="title-anchor" href="#na-pratica-2" aria-hidden="true">¶</a></h4>
<p>O <strong>checkbox hack</strong> funciona com o uso do combinador irmão adjacente.</p>
<h4 id="html-3">HTML <a class="title-anchor" href="#html-3" aria-hidden="true">¶</a></h4>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Hide me if you can!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Esconder div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="css-3">CSS <a class="title-anchor" href="#css-3" aria-hidden="true">¶</a></h4>
<pre><code class="language-css"><span class="token selector">input[type="checkbox"]</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Esconde o checkbox */</span>
<span class="token punctuation">}</span>
<span class="token selector">input:checked + div</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Quando o checkbox for checado, a div será escondida */</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="x-y-3">X ~ Y <a class="title-anchor" href="#x-y-3" aria-hidden="true">¶</a></h2>
<p>Seletor do <strong>CSS 3</strong>, o combinador <strong>adjacente geral</strong> tem uma definição bem semelhante ao irmão adjacente. Para que Y seja alvo, os elementos X e Y devem ser filhos de um mesmo elemento (irmãos) e X deve preceder Y, direta ou indiretamente - isso é, para que Y seja alvo, esse precedimento não precisa ser imediato.</p>
<h4 id="na-pratica-2">Na prática <a class="title-anchor" href="#na-pratica-2" aria-hidden="true">¶</a></h4>
<p>Esse combinador contorna algumas inflexibilidades do <strong>combinador irmão adjacente</strong>. Ainda com o exemplo do <strong>checkbox hack</strong>, podemos personalizar o elemento de forma não tão específica quanto à sua posição:</p>
<h4 id="html-4">HTML <a class="title-anchor" href="#html-4" aria-hidden="true">¶</a></h4>
<pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shower<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shower<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mostrar div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Hide me if you can!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Hide me too if you can!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<h4 id="css-4">CSS <a class="title-anchor" href="#css-4" aria-hidden="true">¶</a></h4>
<pre><code class="language-css"><span class="token selector">input[type="checkbox"], div</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Esconde o checkbox e a div, por padrão */</span>
<span class="token punctuation">}</span>
<span class="token selector">input:checked ~ div</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Quando o checkbox for checado, a div aparecerá */</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="conclusao">Conclusão <a class="title-anchor" href="#conclusao" aria-hidden="true">¶</a></h2>
<p>As linguagens CSS e HTML foram documentadas para serem intuitivas: os elementos formam famílias com outros elementos pais, filhos, descendentes, irmãos… Isso fica claro no nome dos seletores, que têm papel importante na compreensão do combinador; afinal, caso o desenvolvedor entenda que irmãos tem o mesmo pai e que filhos são descendentes diretos do pai, ele poderá tirar um bom proveito do nome dos combinadores para compreender seus funcionamentos.</p>
<blockquote>
<p><q>[…] In both cases, non-element nodes (e.g. text between elements) are ignored when considering adjacency of elements.</q></p>
<p>— <cite><span>W3C</span>, sobre <a href="http://www.w3.org/TR/css3-selectors/">Selectors Level 3</a></cite></p>
</blockquote>
<p>Há uma grande confusão - e com razão - entre os seletores irmãos adjacentes e irmãos gerais. Essa confusão se origina não só de suas classificações como <a href="http://www.w3.org/TR/css3-selectors/#sibling-combinators">seletores de combinação</a>, mas em seus comportamento e definição semelhantes. Tanto é verdade que o combinador adjacente geral (~) se comportará muitas vezes como um irmão adjacente (+), com a diferença de que o adjacente geral é menos exigente quanto à posição do elemento-alvo.</p>
<p>O uso será, portanto, facultativo em diversas situações. E, nesse caso, a minha recomendação é dar prioridade ao combinador adjacente, visto que é um seletor do CSS 2.1 e, portanto, compatível com uma maior gama de browsers. 😃</p>
<h2 id="referencias">Referências <a class="title-anchor" href="#referencias" aria-hidden="true">¶</a></h2>
<ul>
<li><strong>W3C</strong>. <a href="http://www.w3.org/TR/CSS21/selector.html">Selectors</a></li>
<li><strong>W3C</strong>. <a href="http://www.w3.org/TR/css3-selectors/">Selectors Level 3</a>, 29 setembro de 2011</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Se existem recursos no CSS que a total compreensão se restringe a uma parcela de desenvolvedores, esses são os combinadores filhos (&amp;gt;)
    
    </summary>
    
    
      <category term="pt-BR" scheme="https://diessi.ca/blog/tags/pt-br/"/>
    
      <category term="css" scheme="https://diessi.ca/blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>She</title>
    <link href="https://diessi.ca/blog/she/"/>
    <id>https://diessi.ca/blog/she/</id>
    <published>2013-06-01T03:00:00.000Z</published>
    <updated>2017-12-21T01:50:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>She’s despair, daily fatigue and frustration. An intersection of the lack of meaning and the intense desire to mean.</p>
<p>She’s the attempt, failure, and procrastination of both. (Not the immediate withdrawal, at least.)</p>
<p>She’s an overrated trivial human. The excessive worry about disappointing everyone who has been praising her way too much.</p>
<p>She’s the night – and the whole life – spent in the computer. The act of contemplating, sleep deprived, the orange blue sky in which the sun rises.</p>
<p>She’s the past, even though she craves for the future.</p>
<hr>
<p class="note"><b>2017 note</b>: This essay was found unfinished and forgotten in a notebook paper among other stuff of mine from High School.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;She’s despair, daily fatigue and frustration. An intersection of the lack of meaning and the intense desire to mean.&lt;/p&gt;
&lt;p&gt;She’s the att
    
    </summary>
    
    
      <category term="personal" scheme="https://diessi.ca/blog/tags/personal/"/>
    
  </entry>
  
</feed>
